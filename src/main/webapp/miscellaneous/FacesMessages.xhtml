<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="jakarta.faces.html"
      xmlns:f="jakarta.faces.core"
      xmlns:b="http://bootsfaces.net/ui" 
      xmlns:jsf="jakarta.faces"
      xmlns:pt="jakarta.faces.passthrough"
      xmlns:ui="jakarta.faces.facelets">
  <h:head>
    <title>BootsFaces: next-gen JSF Framework</title>
  <meta name="author" content="Riccardo Massera"></meta>
  </h:head>
  <h:body style="padding-top: 60px">
    <ui:composition template="/applayout/pageTemplate.xhtml">

      <ui:define name="content-navigator">
        <b:listLinks>
          <b:navLink href="#reporting_messages" value="Reporting messages" />
          <b:navLink href="#search_expressions" value="Search Expressions" />
          <b:navLink href="#variables" value="Variables" />
        </b:listLinks>
      </ui:define>


      <ui:define name="content">
        <h1><a id="reporting_messages">Reporting messages</a><b:badge value="since 0.8.5" /></h1>
        <p>BootsFaces offers a short-hand API to report <code>FacesMessages</code>:</p>

        <b:panel>
          <script type="syntaxhighlighter" class="brush: java; toolbar: false;first-line: 1">
          <![CDATA[
          FacesMessages.info("Successfully saved.");
          FacesMessages.warning("Warning", "Please double-check your input.");
          FacesMessages.error("This is not a valid zipcode.");
          FacesMessages.fatal("Fatal error", "The application just crashed.");
          ]]></script>
        </b:panel>


        <h2><a id="search_expressions">Search Expressions</a><b:badge value="since 1.0" /></h2>
        <p>You can assign a <code>FacesMessage</code> to a particular field by providing its id. Alternatively,
        you can use a search expression describing one or more fields. This comes in handy because the Java
        backend shouldn't know much about the implementation details of the front-end, at least not if you're
        following a paradigm like MVC, MVP or MVVM. A fairly common solution is to add a semantic CSS class
        to the input field (i.e. a CSS class that doesn't modify the look and feel, but serves as a marker).
        Another, probably even better approach is to use the EL expression of the input field, because the
        EL expression reflects the server-side data structure. We'll come back to the corresponding search expression
        <code>@property(.)</code> in a minute.
        </p>

        <b:panel>
          <script type="syntaxhighlighter" class="brush: java; toolbar: false;first-line: 1">
          <![CDATA[
          FacesMessages.error("mainFormId:addressPanelId:zipcodeId", "This is not a valid zipcode.");
          FacesMessages.error("@styleClass(zipcode)", "This is not a valid zipcode.");
          ]]></script>
        </b:panel>

        <p>The search expressions use the root of the JSF tree as base component. If your JSF tree contains a lot of
        components, this may result in slow evaluation of the search expressions scanning the entire subtree, such as
        <code>@styleClass</code>, <code>**:id</code>, <code>@findIdRecursively</code> and <code>@findPartialIdRecursively</code>.
        You can improve performance by limiting the search scope. For instance, if you know the field you want to
        decorate with an error message is in a form with a particular id, you can speed things up like so:</p>

        <b:panel>
          <script type="syntaxhighlighter" class="brush: java; toolbar: false;first-line: 1">
          <![CDATA[
          FacesMessages.error("mainFormId:@styleClass(zipcode)", "This is not a valid zipcode.");
          ]]></script>
        </b:panel>

        <h2><a id="variables">Variables</a><b:badge value="since 1.0" /></h2>
        <p>The search expression <code>@property</code> allows you to use the variable name to define the <code>FacesMessage</code>.
        More precicly, <code>@property</code> find the JSF component by its EL expression (without the curly braces):</p>

        <b:panel>
          <script type="syntaxhighlighter"
          class="brush: java; toolbar: false;gutter: false; first-line: 1">
          <![CDATA[
          @Named
          @ViewScoped
          public class NumberGuessBean implements Serializable {
            @Min(1)
            @Max(10)
            private int guess=2;
            
            public void submitGuess() {
              FacesMessages.info("@property(numberGuessBean.guess)", "summary", "detail message");
            }
          }
          ]]></script>
        </b:panel>

        <script type="text/javascript">
        SyntaxHighlighter.all();
        </script>

      </ui:define>
    </ui:composition>
  </h:body>
</html>
