<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<ui:composition template="/applayout/pageTemplate.xhtml" xmlns="http://www.w3.org/1999/xhtml"
                xmlns:h="jakarta.faces.html"
                xmlns:f="jakarta.faces.core"
                xmlns:b="http://bootsfaces.net/ui"
                xmlns:ui="jakarta.faces.facelets"
                xmlns:sourcecode="http://java.sun.com/jsf/composite/sourcecode">


  <ui:define name="content-navigator">
    <b:listLinks>
      <b:navLink href="#panels" value="Panels" />
      <b:navLink href="#basic_example" value="Basic example" />
      <b:navLink href="#collapsable_panels" value="Collapsable panels" />
      <b:navLink href="#collapsable_panel_indicator" value="Collapsable panel indicator" />
      <b:navLink href="#persistent_collapseexpand_state" value="Persistent collapse/expand state" />
      <b:navLink href="#programmable_collapseexpand_state" value="Programmable collapse/expand state" />
      <b:navLink href="#disabling_the_content" value="Disabling the content" />
      <b:navLink href="#reference_section" value="Reference section" />
    </b:listLinks>
  </ui:define>


  <ui:define name="content">
    <h1><a id="panels">Panels</a></h1>
    <p>While not always necessary, sometimes you need to put your
    DOM in a box. For those situations, the panel component comes in
    handy.</p>

    <h2><a id="basic_example">Basic example</a></h2>
    <p>
    By default, all the <code>&lt;b:panel&gt;</code> does is apply some basic border and padding to contain some content.
    </p>

    <b:panel title="Live preview" look="info" collapsible="false">
      <b:panel>
        <h:outputText value="Basic panel example " />
      </b:panel>
      <f:facet name="footer">
        <strong>JSF markup:</strong>
        <b:panel>
          <script type="syntaxhighlighter"
          class="brush: xml; toolbar: false;gutter: false; first-line: 1">
          <![CDATA[
          <b:panel>
            <h:outputText value="Basic panel example "/>
          </b:panel>
          ]]>
          </script>
        </b:panel>
      </f:facet>
    </b:panel>


    <h3 id="panels-heading">Panel with heading</h3>
    <p>
    Easily add a heading container to your panel specifying the
    <code>heading</code>
    facet. You may also include any
    <code>&lt;h1&gt;</code>
    -
    <code>&lt;h6&gt;</code>
    to add a pre-styled heading. Facets may contain arbitrary content. For instance, the example below contains a <code>&lt;b:badge /&gt;</code>:
    </p>

    <b:panel title="Live preview" look="info" collapsible="false">
      <b:panel>
        <f:facet name="heading">
          <i class="fa fa-battery-three-quarters" style="padding-right:20px" />
          <h:outputText
             value="Battery charge left: 75% " />
          <b:badge style="margin-left:10px; background-color:#5cb85c" value="good"  />
        </f:facet>
        <h:outputText value="Panel Content" />
      </b:panel>
      <f:facet name="footer">
        <strong>JSF markup:</strong>
        <b:panel>
          <script type="syntaxhighlighter"
          class="brush: xml; toolbar: false;first-line: 0">
          <![CDATA[
          <b:panel>
            <f:facet name="heading">
              <i class="fa fa-battery-three-quarters" style="padding-right:20px" />
              <h:outputText value="Battery charge left: 75% " />
              <b:badge style="margin-left:10px; background-color:#5cb85c" value="good"  />
            </f:facet>
            <h:outputText value="Panel Content"/>
          </b:panel>
          ]]>
          </script>
        </b:panel>
      </f:facet>
    </b:panel>

    <br />
    <p>
    As a simple (but less flexible) alternative, you can specify a title with the
    <code>title</code>
    attribute; since this is meant as an option, the heading facet
    will not be rendered and the panel will render with a heading
    having the attribute's value as Title.
    </p>

    <b:panel title="Live preview" look="info" collapsible="false">
      <b:panel title="Panel title" collapsible="false">
        <h:outputText value="Panel Content" />
      </b:panel>
      <f:facet name="footer">
        <strong>JSF markup: </strong>
        <b:panel>
          <script type="syntaxhighlighter"
          class="brush: xml; toolbar: false;gutter: false; first-line: 1">
          <![CDATA[
          <b:panel title="Panel title" collapsible="false">
            <h:outputText value="Panel Content" />
          </b:panel>
          ]]>
          </script>
        </b:panel>
      </f:facet>
    </b:panel>


    <h2><a id="collapsable_panels">Collapsable panels</a></h2>
    <p>
    By default, panels can be collapsed by clicking the title bar or
    the chevron at the right hand side of the title bar. If you don't
    need this feature, you can switch it off by adding the attribute
    <code>collapsible="false"</code>
    :
    </p>

    <b:panel title="Live preview" look="info" collapsible="false">
      <b:panel title="Try to fold me away!" collapsible="false">
        I bet you can't...
      </b:panel>
      <f:facet name="footer">
        <strong>JSF markup: </strong>
        <b:panel>
          <script type="syntaxhighlighter" class="brush: xml; toolbar: false;gutter: false; first-line: 1">
          <![CDATA[
          <b:panel title="Try to fold me away!" collapsible="false">
            I bet you can't...
          </b:panel>

          ]]>
          </script>
        </b:panel>
      </f:facet>
    </b:panel>


    <h2><a id="collapsable_panel_indicator">Collapsable panel indicator</a><b:badge value="since 0.9.0" /></h2>
    <p>BootsFaces can underline the panel title as a visual clue that the panel can be collapsed using the keyboard.
    You can activate it by setting <code>showCollapseLink="true"</code>:
    </p>

    <b:panel title="Live preview" look="info" collapsible="false">

      <b:panelGrid colSpans="6,6" size="sm">
        <b:panel title="showCollapseLink='false' (default)" look="primary">
        </b:panel>
        <b:panel title="showCollapseLink='true'" showCollapseLink="true" look="primary">
        </b:panel>
      </b:panelGrid>

      <f:facet name="footer">
        <strong>JSF markup: </strong>
        <b:panel>
          <script type="syntaxhighlighter" class="brush: xml; toolbar: false;gutter: false; first-line: 1">
          <![CDATA[
          <b:panelGrid colSpans="6,6" size="sm">
            <b:panel title="showCollapseLink='false' (default)" look="primary">
            </b:panel>
            <b:panel title="showCollapseLink='true'" showCollapseLink="true" look="primary">
            </b:panel>
          </b:panelGrid>]]>
          </script>
        </b:panel>
      </f:facet>
    </b:panel>

    <h:form>

    </h:form>

    <h2><a id="persistent_collapseexpand_state">Persistent collapse/expand state</a></h2>
    <p>By default, panels are not collapsed when the page is
    rendered. If they're outside a form, they are also expanded after
    a post request (i.e. after clicking a button) - even if the user
    had collapsed the panel before clicking the button. To preserve
    the expansion state on postbacks, make sure to put the panel into
    the same form as the command button. The panel below is the only
    panel on this page which restores its state after clicking the
    button:</p>

    <b:panel title="Live preview" look="info" collapsible="false">
      <b:panelGrid colSpans="6,6" id="stateGridId">
        <h:form>
          <b:panel title="Within form - collapse state is restored"
                   look="primary">
            <h:outputText value="Panel Content" />
            <b:messages />
          </b:panel>
          <b:commandButton value="Redraw this page" update="stateGridId"
                           ajax="true" actionListener="#{messagesBean.info}" />
        </h:form>
        <b:panel title="outside the form - open after each postback"
                 look="danger">
          <h:outputText value="Panel Content" />
          <b:messages />
        </b:panel>
      </b:panelGrid>

      <f:facet name="footer">
        <strong>JSF markup: </strong>
        <b:panel>
          <script type="syntaxhighlighter"
          class="brush: xml; toolbar: false;gutter: false; first-line: 1">
          <![CDATA[
          <b:panelGrid colSpans="6,6" id="stateGridId">
            <h:form>
              <b:panel title="Within form - collapse state is restored"
                       look="primary">
                <h:outputText value="Panel Content" />
                <b:messages />
              </b:panel>
              <b:commandButton value="Redraw this page" update="stateGridId"
                               ajax="true" actionListener="&num;{messagesBean.info}" />
            </h:form>
            <b:panel title="outside the form - open after each postback"
                     look="danger">
              <h:outputText value="Panel Content" />
              <b:messages />
            </b:panel>
          </b:panelGrid>

          ]]>
          </script>
        </b:panel>
      </f:facet>
    </b:panel>

    <h2><a id="programmable_collapseexpand_state">Programmable collapse/expand state</a></h2>
    <p>The collapse state can also be controlled by an attribute of
    a managed bean:</p>

    <b:panel title="Live preview" look="info" collapsible="false">
      <h:form>
        <b:panelGrid colSpans="6,6">
          <b:panel
             title="I'm #{panelBean.firstText} because of a bean attribute."
             look="danger" collapsed="#{panelBean.firstPanelCollapsed}">
            <h:outputText value="Panel Content" />
            <b:messages />
          </b:panel>
          <b:panel
             title="I'm #{panelBean.secondText} because of a bean attribute."
             look="danger" collapsed="#{panelBean.secondPanelCollapsed}">
            <h:outputText value="Panel Content" />
            <b:messages />
          </b:panel>
        </b:panelGrid>
        <b:commandButton ajax="true" update="@form"
                         actionListener="#{panelBean.toggle}" value="toggle" />
      </h:form>

      <f:facet name="footer">
        <strong>JSF markup: </strong>
        <b:panel>
          <script type="syntaxhighlighter"
          class="brush: xml; toolbar: false;gutter: false; first-line: 1">
          <![CDATA[
          <h:form>
            <b:panelGrid colSpans="6,6">
              <b:panel
                 title="I'm &num;{panelBean.firstText} because of a bean attribute."
                 look="danger" collapsed="&num;{panelBean.firstPanelCollapsed}">
                <h:outputText value="Panel Content" />
                <b:messages />
              </b:panel>
              <b:panel
                 title="I'm &num;{panelBean.secondText} because of a bean attribute."
                 look="danger" collapsed="&num;{panelBean.secondPanelCollapsed}">
                <h:outputText value="Panel Content" />
                <b:messages />
              </b:panel>
            </b:panelGrid>
            <b:commandButton ajax="true" update="@form"
                             actionListener="&num;{panelBean.toggle}" value="toggle" />
          </h:form>

          ]]>
          </script>
        </b:panel>
      </f:facet>
    </b:panel>

    <p>However, if the user opens or closes a panel, their choice
    overrides the values taken from the bean.</p>

    <br />
    <h3 id="panels-alternatives">Contextual alternatives</h3>
    <p>
    Like other components, easily make a panel more meaningful to a
    particular context by adding a
    <code>look</code>
    attribute with values primary, success, info, warning or danger.
    </p>

    <b:panel title="Live preview" look="info" collapsible="false">
      <b:panel title="Panel Title - Primary" look="primary">
        <h:outputText value="Panel Content" />
      </b:panel>
      <b:panel title="Panel Title - Success" look="success">
        <h:outputText value="Panel Content" />
      </b:panel>
      <b:panel title="Panel Title - Info" look="info">
        <h:outputText value="Panel Content" />
      </b:panel>
      <b:panel title="Panel Title - Warning" look="warning">
        <h:outputText value="Panel Content" />
      </b:panel>
      <b:panel title="Panel Title - Danger" look="danger">
        <h:outputText value="Panel Content" />
      </b:panel>

      <f:facet name="footer">
        <strong>JSF markup: </strong>
        <b:panel>
          <script type="syntaxhighlighter"
          class="brush: xml; toolbar: false;gutter: false; first-line: 1">
          <![CDATA[
          <b:panel title="Panel Title - Primary" look="primary">
            <h:outputText value="Panel Content" />
          </b:panel>
          <b:panel title="Panel Title - Success" look="success">
            <h:outputText value="Panel Content" />
          </b:panel>
          <b:panel title="Panel Title - Info" look="info">
            <h:outputText value="Panel Content" />
          </b:panel>
          <b:panel title="Panel Title - Warning" look="warning">
            <h:outputText value="Panel Content" />
          </b:panel>
          <b:panel title="Panel Title - Danger" look="danger">
            <h:outputText value="Panel Content" />
          </b:panel>]]>
          </script>
        </b:panel>
      </f:facet>
    </b:panel>

    <h3 id="panels-footer">Panels with a footer</h3>
    <p>
    Wrap buttons or secondary text in a
    <code>footer</code>
    facet. Note that panel footers <strong>do not</strong> inherit
    colors and borders when using contextual variations as they are
    not meant to be in the foreground.
    </p>

    <b:panel title="Live preview" look="info" collapsible="false">

      <b:panel title="Panel with Footer" look="info">
        <h:outputText value="Panel Content" />
        <f:facet name="footer">
          <h:outputText value="Panel Footer" />
        </f:facet>
      </b:panel>

      <f:facet name="footer">
        <strong>JSF markup: </strong>
        <b:panel>
          <script type="syntaxhighlighter"
          class="brush: xml; toolbar: false;gutter: false; first-line: 1">
          <![CDATA[
          <b:panel title="Panel with Footer" look="info">
            <h:outputText value="Panel Content" />
            <f:facet name="footer">
              <h:outputText value="Panel Footer" />
            </f:facet>
          </b:panel>
          ]]>
          </script>
        </b:panel>
      </f:facet>
    </b:panel>

    <h3 id="panels-ajax">AJAX and JavaScript <b:badge value="since 0.8.0" /></h3>
    <p>
    You can use the standard JavaScript callback handlers to call both JavaScript and AJAX code. Apart from the standard
    HTML event handlers like onclick and onmouseover there are also four Bootstrap callback listeners: <code>onexpand</code>,
    <code>onexpanded</code>, <code>oncollapse</code> and <code>oncollapsed.</code>.
    </p>

    <b:panel title="Live preview" look="info" collapsible="false">
      <h:form>
        <b:panelGrid colSpans="6,6">
          <b:panel look="primary" title="AJAXified b:panel"
                   update="@form:messages"
                   onexpand="console.log('expand - start');ajax:ajaxBean.onPanelExpandStart()"
                   onexpanded="console.log('expand - done');ajax:ajaxBean.onPanelExpanded()"
                   oncollapse="console.log('expand - start');ajax:ajaxBean.onPanelCollapseStart()"
                   oncollapsed="console.log('expand - done');ajax:ajaxBean.onPanelCollapsed()"
                   onmouseover="console.log('mouse over');ajax:ajaxBean.onMouseOver()"
                   onmouseout="console.log('mouse out');ajax:ajaxBean.onMouseOut()"
                   onclick="console.log('click');ajax:ajaxBean.onClick()"
                   >
            The content of the panel does not matter. Look at the messages at the right hand side.
            That's where the music plays.
          </b:panel>
          <b:well id="messages">
            Last action:
            <ul>
              <ui:repeat var="message" value="#{ajaxBean.messages}">
                <li>#{message}</li>
              </ui:repeat>
            </ul>
          </b:well>
        </b:panelGrid>
      </h:form>

      <f:facet name="footer">
        <strong>JSF markup: </strong>
        <b:panel>
          <script type="syntaxhighlighter"
          class="brush: xml; toolbar: false;gutter: false; first-line: 1">
          <![CDATA[
          <h:form>
            <b:panelGrid colSpans="6,6">
              <b:panel look="primary" title="AJAXified b:panel"
                       update="@form:messages"
                       onexpand="console.log('expand - start');ajax:ajaxBean.onPanelExpandStart()"
                       onexpanded="console.log('expand - done');ajax:ajaxBean.onPanelExpanded()"
                       oncollapse="console.log('expand - start');ajax:ajaxBean.onPanelCollapseStart()"
                       oncollapsed="console.log('expand - done');ajax:ajaxBean.onPanelCollapsed()">
                The content of the panel does not matter. Instead, look at the messages.
              </b:panel>
              <b:well id="messages">
                Last action:
                <ul>
                  <ui:repeat var="message" value="#{ajaxBean.messages}">
                    <li>#{message}</li>
                  </ui:repeat>
                </ul>
              </b:well>
            </b:panelGrid>
          </h:form>
          ]]>
          </script>
        </b:panel>
      </f:facet>
    </b:panel>

    <h2><a id="disabling_the_content">Disabling the content</a><b:badge value="Since 1.1.0"/></h2>
    <p>By setting the flag <code>contentDisabled="true"</code> you can set each child element to disabled. More precisely,
    the panels of the panel are wrapped in a disabled fieldset, which disables input fields, checkboxes and buttons, but
    not every component. In particular, tabs and panels still work. You'll also have to be careful about
    links (everything that's using an <code>&lt;a&gt;</code> tag, like <code>&lt;button&gt;</code> and <code>&lt;b:navLink&gt;</code>.)
    These elements will be shown as disabled, but still are accessible. In part, that's because this CSS property isn't fully
    standardized yet. For instance, it isn't supported by Internet Explorer 11 and below, and Opera 18 and below.</p>

    <b:panel title="Live preview" look="info" collapsible="false">

      <b:panel contentDisabled="true">
        <h:form>
          <b:datepicker label="Datepicker"  />
          <b:dateTimePicker label="DateTimerPicker" />
          <b:colorPicker label="ColorPicker" />
          <b:selectOneMenu label="SelectOneMenu" >
          <f:selectItem itemValue="one" itemLabel="one"></f:selectItem>
          <f:selectItem itemValue="two" itemLabel="two"></f:selectItem>
          </b:selectOneMenu>
          <b:selectMultiMenu label="SelectMultiMenu" >
          <f:selectItem itemValue="one" itemLabel="one"></f:selectItem>
          <f:selectItem itemValue="two" itemLabel="two"></f:selectItem>
          </b:selectMultiMenu>
          <br />
          <b:button look="primary" value="You can't click me!"/>
        </h:form>
      </b:panel>

      <f:facet name="footer">
        <strong>JSF markup: </strong>
        <b:panel>
          <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
          <![CDATA[
          <b:panel contentDisabled="true">
            <h:form>
              <b:datepicker label="Datepicker"  />
              <b:dateTimePicker label="DateTimerPicker" />
              <b:colorPicker label="ColorPicker" />
              <b:selectOneMenu label="SelectOneMenu" >
              <f:selectItem itemValue="one" itemLabel="one"></f:selectItem>
              <f:selectItem itemValue="two" itemLabel="two"></f:selectItem>
              </b:selectOneMenu>
              <b:selectMultiMenu label="SelectMultiMenu" >
              <f:selectItem itemValue="one" itemLabel="one"></f:selectItem>
              <f:selectItem itemValue="two" itemLabel="two"></f:selectItem>
              </b:selectMultiMenu>
              <br />
              <b:button look="primary" value="You can't click me!"/>
            </h:form>
          </b:panel>
          ]]>
          </script>
        </b:panel>
      </f:facet>
    </b:panel>

    <h:form>
      <b:tabView>
        <b:tab title="preview">

        </b:tab>
        <b:tab title="JSF markup">

        </b:tab>
      </b:tabView>
    </h:form>



    <br />
    <h2><a id="reference_section">Reference section</a></h2>
    <ui:include src="PanelAttributes.xhtml" />
    <b:panel look="info">
      <f:facet name="heading">
        <b>Facets of &lt;b:panel &gt;</b>
      </f:facet>
      <table class="table table-striped table-hover"
             style="background-color: #fff">
        <thead>
          <tr>
            <th>Name of the facet</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
        <tr>
          <td>heading</td>
          <td>This optional facet can be used to render complex
          titles.</td>
        </tr>
        <tr>
          <td>footer</td>
          <td>This optional facet can be used to render complex
          footers.</td>
        </tr>
        </tbody>
      </table>
    </b:panel>

    <b:panel look="info">
      <f:facet name="heading">
        <b>Skinning</b>
      </f:facet>
      <table class="table table-striped table-hover"
             style="background-color: #fff">
        <tr>
          <td>panel</td>
          <td>This CSS class applies to the entire panel.</td>
        </tr>
        <tr>
          <td>panel-title</td>
          <td>This CSS class applies to the title area of the
          panel.</td>
        </tr>
        <tr>
          <td>panel-footer</td>
          <td>This CSS class applies to the footer area of the
          panel.</td>
        </tr>
      </table>
    </b:panel>

    <br />
    <br />
    <br />
    <script type="text/javascript">
    SyntaxHighlighter.all();
    </script>
  </ui:define>
</ui:composition>
