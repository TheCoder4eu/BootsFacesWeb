<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<ui:composition template="/applayout/pageTemplate.xhtml" xmlns="http://www.w3.org/1999/xhtml"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:b="http://bootsfaces.net/ui"
                xmlns:ui="http://java.sun.com/jsf/facelets">


  <ui:define name="content-navigator">
    <b:listLinks>
      <b:navLink href="#inputtext" value="InputText" />
      <b:navLink href="#enhancing_the_b_inputtext_form_control" value="Enhancing the b:inputText form control" />
      <b:navLink href="#appending_or_prepending_icons" value="Appending or prepending icons" />
      <b:navLink href="#appending_or_prepending_buttons" value="Appending or prepending buttons" />
      <b:navLink href="#appending_or_prepending_dropbuttons" value="Appending or prepending DropButtons" />
      <b:navLink href="#controlling_the_size_of_b_inputtext" value="Controlling the size of b:inputText" />
      <b:navLink href="#ajax_and_javascript" value="AJAX and JavaScript" />
      <b:navLink href="#jsf" value="JSF 2.2 pass-through attributes" />
      <b:navLink href="#labels" value="Labels, required fields and error messages" />
      <b:navLink href="#bean_validation_api" value="Bean Validation API (JSR 303 and JSR 349)" />
      <b:navLink href="#inline_forms" value="Inline forms" />
      <b:navLink href="#configuring_the_default_value_of_the" value="Configuring the default value of the" />
      <b:navLink href="#responsive_design" value="Responsive design" />
      <b:navLink href="#visibility_depending_on_screen_size" value="Visibility depending on screen size" />
      <b:navLink href="#tags" value="Tags" />
      <b:navLink href="#mask" value="Mask" />
      <b:navLink href="#reference_section" value="Reference section" />
    </b:listLinks>
  </ui:define>


  <ui:define name="content">
    <style>td {padding: 8px;}</style>
    <h1><a id="inputtext">InputText</a></h1>

    <p>The most common form controls are text-based input fields. They accept arbitrary text
    (as opposed to date pickers and color pickers, which restrict the input to their data type).
    </p>
    <p>The most simple example is a plain <code>b:inputText</code> with a <code>placeholder</code> attribute,
    which contains an hint that is shown in the input field until something is typed in it.
    The demo below shows what such a simple inputText looks like. We've added a bit of
    <a href="../forms/ajax.jsf">AJAX functionality</a> with a small delay to it to make it more interesting:</p>

    <b:panel title="Live preview" look="info" collapsible="false">
      <h:form>
        <b:inputText placeholder="Type something here..." value="#{inputTextBean.map[inputTextBean.key]}"
                     onkeyup="ajax:inputTextBean.capitalizeText()" update="@after" delay="1000"/>
        <b:label value="#{inputTextBean.map['key']}" id="label"/>

        <b:label value="#{inputTextBean.capitalText}" id="captitallabel"/>
      </h:form>

      <f:facet name="footer">
        <strong>JSF markup:</strong>
        <b:panel>
          <script type="syntaxhighlighter"
          class="brush: xml; toolbar: false;gutter: false; first-line: 1">
          <![CDATA[
          <h:form>
            <b:inputText placeholder="Type something here..." value="&num;{inputTextBean.text}"
                         onkeyup="ajax:inputTextBean.capitalizeText()" update="@next" delay="1000" />
            <b:label value="&num;{inputTextBean.map['key']}" id="label"/>
            <b:label value="&num;{inputTextBean.getCapitalText()}" id="captitallabel"/>
          </h:form>
          ]]>
          </script>
        </b:panel>
      </f:facet>
    </b:panel>

    <p>As you noticed, the input is as large as its parent container (minus a little margin). You will see how to control its size later in this section.</p>

    <h2><a id="enhancing_the_b_inputtext_form_control">Enhancing the b:inputText form control</a></h2>
    <p>To help you enhance the user experience, BootsFaces comes in with a useful feature:</p>
    <p>You can easily prepend or append text to your inputTexts and what you prepend and append will seem part of the input field.
    Just use the facets <code>prepend</code> and <code>append</code> and put the <code>h:outputText</code> element
    (or image, or whatever) into the facet. You can even prepend and append at the same time, as in the following example:</p>
    <b:panel title="Live preview" look="info" collapsible="false">
      <b:form inline="true">
        <h:panelGrid columns="1"  cellpadding="5">
          <b:inputText label="E-mail:"  style="width:100%;" labelStyle="width:80px;">
            <f:facet name="prepend">
              <h:outputText value="@" />
            </f:facet>
          </b:inputText>
          <b:inputText label="Amount:"  labelStyle="width:80px;">
            <f:facet name="append">
              <h:outputText value=".00" />
            </f:facet>
          </b:inputText>
          <b:inputText label="Price:"  labelStyle="width:80px;">
            <f:facet name="prepend">
              <h:outputText value="$" />
            </f:facet>
            <f:facet name="append">
              <h:outputText value=".00" />
            </f:facet>
          </b:inputText>
        </h:panelGrid>
      </b:form>
      <f:facet name="footer">
        <strong>JSF markup:</strong>
        <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
        <![CDATA[
        <b:form inline="true">
          <h:panelGrid columns="1" cellpadding="5">
            <b:inputText label="E-mail:" labelStyle="width:80px;">
              <f:facet name="prepend">
                <h:outputText value="@" />
              </f:facet>
            </b:inputText>
            <b:inputText label="Amount:" labelStyle="width:80px;">
              <f:facet name="append">
                <h:outputText value=".00" />
              </f:facet>
            </b:inputText>
            <b:inputText label="Price:" labelStyle="width:80px;">
              <f:facet name="prepend">
                <h:outputText value="$" />
              </f:facet>
              <f:facet name="append">
                <h:outputText value=".00" />
              </f:facet>
            </b:inputText>
          </h:panelGrid>
        </b:form>]]></script>
      </f:facet>
    </b:panel>
    <p>Finally, you can go further and prepend or append multiple text elements, as in the following example:</p>
    <b:panel title="Live preview" look="info" collapsible="false">
      <b:form inline="true">
        <b:inputText value="99" label="Your bid" >
          <f:facet name="prepend">
            <h:outputText value="offer" />
            <h:outputText value="$" />
          </f:facet>
          <f:facet name="append">
            <h:outputText value=".00" />
            <h:outputText value="cash" />
          </f:facet>
        </b:inputText>
      </b:form>
      <f:facet name="footer">
        <strong>JSF markup:</strong>
        <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
        <![CDATA[
        <b:form inline="true">
          <b:inputText value="99" label="Your bid" >
            <f:facet name="prepend">
              <h:outputText value="offer" />
              <h:outputText value="$" />
            </f:facet>
            <f:facet name="append">
              <h:outputText value=".00" />
              <h:outputText value="cash" />
            </f:facet>
          </b:inputText>
        </b:form>]]></script>
      </f:facet>
    </b:panel>
    <h2><a id="appending_or_prepending_icons">Appending or prepending icons</a></h2>
    <p>You can take advantage of the <code><b:navLink outcome="/layout/icons" value="&lt;b:icon&gt;"/></code> or <code><b:navLink outcome="/layout/icons" value="&lt;b:iconAwesome&gt;"/></code> components to append (or prepend) icons :</p>
    <b:panel title="Live preview" look="info" collapsible="false">
      <b:form horizontal="true">
        <b:inputText placeholder="Username" required="true" label="Username"  colMd="10" labelColMd="2">
          <f:facet name="prepend">
            <b:icon name="user" />
          </f:facet>
        </b:inputText>

        <b:inputText placeholder="Password" label="Password"  colMd="10" labelColMd="2">
          <f:facet name="prepend">
            <b:iconAwesome name="key" />
          </f:facet>
        </b:inputText>
      </b:form>
      <f:facet name="footer">
        <strong>JSF markup:</strong>
        <b:panel>
          <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
          <![CDATA[
          <b:form horizontal="true">
            <b:inputText placeholder="Username" required="true" label="Username" colMd="10" labelColMd="2">
              <f:facet name="prepend">
                <b:icon name="user" />
              </f:facet>
            </b:inputText>

            <b:inputText placeholder="Password" label="Password" colMd="10" labelColMd="2">
              <f:facet name="prepend">
                <b:iconAwesome name="key" />
              </f:facet>
            </b:inputText>
          </b:form>]]>
          </script>
        </b:panel>
      </f:facet>
    </b:panel>


    <h2><a id="appending_or_prepending_buttons">Appending or prepending buttons</a></h2>
    <p>Another nice feature is that you can append (or prepend) buttons, allowing you to build compact mini-forms for specific actions with little effort:</p>
    <b:panel title="Live preview" look="info">
      <b:form id="bid" prependId="false">
        <b:inputText id="mybid" class="mybid-example" value="#{testBean.val6}" label="Your offer:" >
          <f:facet name="prepend">
            <b:button look="danger" value="Reset" onclick="$('.mybid-example').val('');return false;" iconAwesome="recycle"/>
          </f:facet>
          <f:facet name="append">
            <b:commandButton look="primary" value="Bid!" ajax="true" update="amodal" oncomplete="$('.modal-bid-example').modal('show');"
                             iconAwesome="rss" icon-align="right"/>
          </f:facet>
        </b:inputText>

        <b:modal id="amodal" class="modal-bid-example" title="Bid for this Item">
          <h2>Congratulations!</h2>
          <h:panelGrid columns="2">
            <h:outputText value="You offered $" />
            <h:outputText value="#{testBean.val6}" />
          </h:panelGrid>
          <f:facet name="footer">
            <b:button value="close" dismiss="modal" onclick="return false;"/>
          </f:facet>
        </b:modal>
      </b:form>
      <f:facet name="footer">
        <strong>JSF markup:</strong><br/>
        <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
        <![CDATA[
        <b:form id="bid" prependId="false">
          <b:inputText id="mybid" class="mybid-example" value="&num;{testBean.val6}" label="Your offer:" >
            <f:facet name="prepend">
              <b:button look="danger" value="Reset" onclick="$('.mybid-example').val('');return false;" iconAwesome="recycle"/>
            </f:facet>
            <f:facet name="append">
              <b:commandButton look="primary" value="Bid!" ajax="true" update="amodal" oncomplete="$('.modal-bid-example').modal('show');"  iconAwesome="rss" icon-align="right"/>
            </f:facet>
          </b:inputText>

          <b:modal id="amodal" class="modal-bid-example" title="Bid for this Item">
            <h2>Congratulations!</h2>
            <h:panelGrid columns="2">
              <h:outputText value="You offered $" />
              <h:outputText value="&num;{testBean.val6}" />
            </h:panelGrid>
            <f:facet name="footer">
              <b:button value="close" dismiss="modal" onclick="return false;"/>
            </f:facet>
          </b:modal>
        </b:form>]]></script>
      </f:facet>
    </b:panel>

    <p class="text-warning"><b:badge value="caveat" /> There is only one limitation: you can not prepend or append mixed texts and buttons.
    The elements on each side can be only of the same type. For instance, it's possible to prepend text elements and append buttons.
    But it's not possible to prepend both a text element and a button at the same time.</p>

    <h2><a id="appending_or_prepending_dropbuttons">Appending or prepending DropButtons</a></h2>
    <p>What you have seen also applies to DropButtons:</p>
    <b:panel title="Live preview" look="info" collapsible="false">
      <b:form horizontal="true">
        <b:formGroup>
          <b:inputText placeholder="Text" span="6">
            <f:facet name="prepend">
              <b:dropButton value="DropButton">
              <b:navLink value="Action" href="#"></b:navLink>
              <b:navLink value="Another action" href="#"></b:navLink>
              <b:navLink value="Something else here" href="#"></b:navLink>
              <b:navLink></b:navLink>
              <b:navLink header="Nav header"></b:navLink>
              <b:navLink value="Separated link" href="#"></b:navLink>
              <b:navLink value="One more separated link" href="#"></b:navLink>
              </b:dropButton>
              <h:outputText value="www" />
            </f:facet>
          </b:inputText>
          <b:inputText placeholder="Text" span="6">
            <f:facet name="append">
              <b:dropButton value="DropButton">
              <b:navLink value="Action" href="#"></b:navLink>
              <b:navLink value="Another action" href="#"></b:navLink>
              <b:navLink value="Something else here" href="#"></b:navLink>
              <b:navLink></b:navLink>
              <b:navLink header="Nav header"></b:navLink>
              <b:navLink value="Separated link" href="#"></b:navLink>
              <b:navLink value="One more separated link" href="#"></b:navLink>
              </b:dropButton>
            </f:facet>
          </b:inputText>
        </b:formGroup>
      </b:form>


      <f:facet name="footer">
        <strong>JSF markup:</strong>
        <b:panel>
          <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
          <![CDATA[
          <b:form horizontal="true">
            <b:formGroup>
              <b:inputText placeholder="Text" span="6">
                <f:facet name="prepend">
                  <b:dropButton value="DropButton">
                  <b:navLink value="Action" href="#"></b:navLink>
                  <b:navLink value="Another action" href="#"></b:navLink>
                  <b:navLink value="Something else here" href="#"></b:navLink>
                  <b:navLink></b:navLink>
                  <b:navLink header="Nav header"></b:navLink>
                  <b:navLink value="Separated link" href="#"></b:navLink>
                  <b:navLink value="One more separated link" href="#"></b:navLink>
                  </b:dropButton>
                  <h:outputText value="www" />
                </f:facet>
              </b:inputText>
              <b:inputText placeholder="Text" span="6">
                <f:facet name="append">
                  <b:dropButton value="DropButton">
                  <b:navLink value="Action" href="#"></b:navLink>
                  <b:navLink value="Another action" href="#"></b:navLink>
                  <b:navLink value="Something else here" href="#"></b:navLink>
                  <b:navLink></b:navLink>
                  <b:navLink header="Nav header"></b:navLink>
                  <b:navLink value="Separated link" href="#"></b:navLink>
                  <b:navLink value="One more separated link" href="#"></b:navLink>
                  </b:dropButton>
                </f:facet>
              </b:inputText>
            </b:formGroup>
          </b:form>
          ]]></script>
        </b:panel>
      </f:facet>
    </b:panel>

    <h2><a id="controlling_the_size_of_b_inputtext">Controlling the size of b:inputText</a></h2>

    <strong>Height sizing</strong>
    <p>You can create larger or smaller form controls that match button sizes.</p>
    <p>Use the <code>fieldSize</code> attribute for predefined input field sizes:</p>

    <b:panel title="Live preview" look="info" collapsible="false">
      <b:form>
        <b:inputText fieldSize="sm" placeholder="small (sm)"/>
        <b:inputText placeholder="default"/>
        <b:inputText fieldSize="lg" placeholder="large (lg)"/>
      </b:form>

      <f:facet name="footer">

        <strong>JSF markup:</strong>
        <b:panel>
          <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
          <![CDATA[
          <b:form>
            <b:inputText fieldSize="sm" placeholder="small (sm)"/>
            <b:inputText placeholder="default"/>
            <b:inputText fieldSize="lg" placeholder="large (lg)"/>
          </b:form>]]></script>
        </b:panel>
      </f:facet>
    </b:panel>

    <h2><a id="ajax_and_javascript">AJAX and JavaScript</a><b:badge value="since 0.8.0" /></h2>
    <p>The <code>&lt;b:inputText &gt;</code> supports the full suite of JavaScript and AJAX events,
    as described in <a href="ajax.jsf">the description of AJAX in BootsFaces</a>. Basically, each of the
    many JavaScript callback handlers (the <code>on[event]</code> attributes) also supports AJAX.
    To get familiar with BootsFaces AJAX, try the
    <a target="#" href="https://github.com/stephanrauh/BootsFaces-Examples/tree/master/AJAX">BootsFaces AJAX demo project</a>.</p>

    <h2><a id="jsf">JSF 2.2 pass-through attributes</a></h2>
    <p>It's possible to use pass-through attributes with the <code>&lt;b:inputText</code> widget, but there's a twist: the attributes are added multiple times.
    This is because there are several plausible places to put a pass-through attribute in, so we decided to leave it as it is.</p>
    <p>For instance, consider this JSF snippet:</p>
    <b:panel look="primary">
      <script type="syntaxhighlighter"
      class="brush: xml; toolbar: false;gutter: false; first-line: 1">
      <![CDATA[
      <b:inputText  value="&num;{userBean.name}" label="Enter your name"
                   ng:ng-model="name" />
      <b:inputText  value="&num;{userBean.age}" label="How old are you?"
                   ng:type="number" ng:min="5" ng:max="125" ng:ng-model="age" />]]>
      </script>
    </b:panel>
    <p>The generated HTML code looks like so:</p>
    <h:graphicImage library="passthrough" name="generatedHtml.png" />

    <h2><a id="labels">Labels, required fields and error messages</a><b:badge value="breaking change in 1.1.0" /></h2>
    <p>You can add a label by adding the attribute <code>label</code>. The label is also used by the JSF messages. To give you maximum flexibility,
    you can suppress automatic rendering of labels by adding <code>renderLabel="false"</code>.
    </p>
    <h5>BootsFaces 1.0.2 and below:</h5>
    <p>Required inputs fields and their labels both bear the CSS class <code>bf-required</code>. By default, this adds an asterisk to the label.</p>
    <p>If the field has a FacesMessage, one of the CSS classes <code>bf-info</code>, <code>bf-warning</code>,
    <code>bf-error</code> or <code>bf-fatal</code>, depending on which error severity the message has.
    The latter two classes color the label red.</p>
    <p>If there's no message,
    the field and its label bear the pseudo CSS class <code>bf-no-message</code>  and <code>has-success</code>. The latter colors the label green by default.
    </p>
    <h5>BootsFaces 1.1.0:</h5>
    <p><code>bf-info</code>, <code>bf-warning</code>,
    <code>bf-error</code> or <code>bf-fatal</code> have been dropped in favor of the standard Bootstrap CSS classes <code>has-success</code>,
    <code>has-warning</code> and <code>has-error</code>. Plus, they are applied to the <code>form-group</code> instead of the labels and input fields.</p>
    <h5>Compatibility settings</h5>
    <p>If your application depends on the old HTML code, activate the context parameter <code>net.bootsfaces.legacy_error_classes</code>
    in the web.xml. The example below shows how to do this.</p>


    <b:panel title="Live preview" look="info" collapsible="false">

      <b:panelGrid columns="2" size="sm">
        <b:form>
          <b:inputText id="name" value="#{userBean.name}" label="Enter your name" required="true"  />
          <b:message for="@previous" />

          <b:inputText id="age" value="#{userBean.age}" label="What's your age?"  />
          <b:message for="@previous" />

          <b:commandButton update="@form" value="Validate constraints" />
        </b:form>

        <b:form>
          <b:switch value="#{messageStyleBean.useLegacyBootsFacesStyle}"
                    immediate="true"
                    caption="use legacy BootsFaces CSS classes"
                    label="compatibility settings"
                    onchange="ajax:messageStyleBean.toggleSettings();"
                    update="@form"
                    />
        </b:form>
      </b:panelGrid>

      <f:facet name="footer">
        <b:tabView activeIndex="0"  contentStyle="border-right: 1px solid #ddd;border-left: 1px solid #ddd;border-bottom: 1px solid #ddd;padding:10px">
          <b:tab title="JSF markup">
            <b:panel>
              <script type="syntaxhighlighter"
              class="brush: xml; toolbar: false;gutter: false; first-line: 1">
              <![CDATA[
              <b:form>
                <b:inputText id="name" value="&num;{userBean.name}" label="Enter your name" required="true"  />
                <b:message for="@previous" />

                <b:inputText id="age" value="&num;{userBean.age}" label="What's your age?"  />
                <b:message for="@previous" />

                <b:commandButton update="@form" value="Validate constraints" />
              </b:form>
              ]]>
              </script>
            </b:panel>
          </b:tab>
          <b:tab title="Java Bean">
            <b:panel>
              <script type="syntaxhighlighter"
              class="brush: java; toolbar: false;gutter: false; first-line: 1">
              <![CDATA[
              @ManagedBean
              @RequestScoped
              public class UserBean {
                @Size(min=1, max=10)
                private String name;

                @Min(5)
                private int age;

                public String getName() {
                  return name;
                }

                public void setName(String name) {
                  this.name = name;
                }

                public int getAge() {
                  return age;
                }

                public void setAge(int age) {
                  this.age = age;
                }
              }                 ]]>
              </script>
            </b:panel>
          </b:tab>
          <b:tab title="web.xml">
            <b:panel>
              <p>The switch toggles the boolean attribute <code>messageStyleBean.useLegacyBootsFacesStyle</code>.
              The EL expression in the web.xml allows us to demonstrate both code styles.
              Of course, in real-world applications, you'll set this parameter either to true or to false.</p>
              <script type="syntaxhighlighter"
              class="brush: xml; toolbar: false;gutter: false; first-line: 1">
              <![CDATA[
              <context-param>
              <param-name>net.bootsfaces.legacy_error_classes</param-name>
              <param-value>#{messageStyleBean.useLegacyBootsFacesStyle}</param-value>
              </context-param>
              ]]>
              </script>
            </b:panel>
          </b:tab>
        </b:tabView>
      </f:facet>
    </b:panel>

    <h2><a id="bean_validation_api">Bean Validation API (JSR 303 and JSR 349)</a><b:badge value="since 1.1.0" /></h2>

    <b:panel title="Live preview" look="info" collapsible="false">
      <b:form>
        <b:inputText id="name" value="#{beanValidationBean.name}"
                     label="Enter your name"  />
        <b:message for="@previous" />
        <b:inputText id="age" value="#{beanValidationBean.age}"
                     label="What's your age?"  />
        <b:message for="@previous" />
        <b:commandButton update="@form" value="Validate constraints" />
        <b:messages redisplay="false"/>
      </b:form>

      <f:facet name="footer">
        <b:tabView activeIndex="0"  contentStyle="border-right: 1px solid #ddd;border-left: 1px solid #ddd;border-bottom: 1px solid #ddd;padding:10px">
          <b:tab title="JSF markup">
            <b:panel>
              <script type="syntaxhighlighter"
              class="brush: xml; toolbar: false;gutter: false; first-line: 1">
              <![CDATA[
              <b:form>
                <b:inputText id="name" value="&num;{beanValidationBean.name}" label="Enter your name" />
                <b:message for="@previous" />
                <b:inputText id="age" value="&num;{beanValidationBean.age}" label="What's your age?" />
                <b:message for="@previous" />

                <b:commandButton update="@form" value="Validate constraints" />
                <b:messages redisplay="false"/>
              </b:form>
              ]]>
              </script>
            </b:panel>
          </b:tab>
          <b:tab title="Java Bean">
            <b:panel>
              <script type="syntaxhighlighter"
              class="brush: java; toolbar: false;gutter: false; first-line: 1">
              <![CDATA[
              @ManagedBean
              @RequestScoped
              public class BeanValidationBean {
                @NotNull(message="Your name is as important as you are. Don't hesitate to fill this field!")
                @Size(min=1, max=10)
                private String name;

                @Min(value=18, message="In most countries, you're not considered a grown-up yet.")
                @Max(value=65, message="In many countries, you've already reached retirement age.")
                private int age;

                public String getName() {
                  return name;
                }

                public void setName(String name) {
                  this.name = name;
                }

                public int getAge() {
                  return age;
                }

                public void setAge(int age) {
                  this.age = age;
                }
              }
              ]]>
              </script>
            </b:panel>
          </b:tab>
        </b:tabView>
      </f:facet>
    </b:panel>

    <h2><a id="inline_forms">Inline forms</a><b:badge value="breaking change in 1.1.0"/></h2>
    <p>To comply with the coding style recommended and supported by the Bootstrap team, we've decided to rework the
    concept of horizontal and inline forms from scratch in BootsFaces 1.1.0. If you're migrating from an
    earlier version of BootsFaces, and if you're using inline forms, you'll most likely want to replace them
    by horizontal forms.</p>
    <p>Since BootsFaces 1.1.0, inline forms can only be used with a single row. There's no such thing as a multi-line
    inline form. Multiline-forms are supported either by regular stacked forms (default) or by horizontal form.
    You activate the horizontal form mode by using the BootsFaces form <code>&lt;b:form horizontal="true" &gt;</code></p>.
    <b:tabView>
      <b:tab title="horizontal form">
        <b:well style="height:180px">
          <b:form horizontal="true">
            <b:inputText id="name" value="#{userBean.name}" col-xs="8" col-md="10" label-col-xs="4" label-col-md="2"
                         label="Enter your name" required="true"  />
            <b:inputText id="age" value="#{userBean.age}" tiny-screen="two-thirds" medium-screen="10" label-tiny-screen="one-third"
                         label-medium-screen="2"
                         label="What's your age?"  />
          </b:form>
        </b:well>
      </b:tab>
      <b:tab title="JSF markup (horizontal form)">
        <b:well style="height:180px">
          <script type="syntaxhighlighter"
          class="brush: xml; toolbar: false;gutter: false; first-line: 1">
          <![CDATA[
          <b:well>
            <b:form horizontal="true">
              <b:inputText id="name" value="&num;{userBean.name}" col-xs="8" col-md="10" label-col-xs="4" label-col-md="2"
                           label="Enter your name" required="true"  />
              <b:inputText id="age" value="&num;{userBean.age}" tiny-screen="two-thirds" medium-screen="10" label-tiny-screen="one-third"
                           label-medium-screen="2"
                           label="What's your age?"  />
            </b:form>
          </b:well>
          ]]>
          </script>
        </b:well>
      </b:tab>
      <b:tab title="inline form">
        <b:well style="height:180px">
          <b:form inline="true">
            <b:inputText id="name" value="#{userBean.name}"
                         label="Enter your name" required="true"  />
            <b:inputText id="age" value="#{userBean.age}"
                         label="What's your age?"  />
          </b:form>
        </b:well>
      </b:tab>
      <b:tab title="JSF markup (inline form)">
        <b:well style="height:180px">
          <script type="syntaxhighlighter"
          class="brush: xml; toolbar: false;gutter: false; first-line: 1">
          <![CDATA[
          <b:well style="height:180px">
            <b:form inline="true">
              <b:inputText id="name" value="&num;{userBean.name}"
                           label="Enter your name" required="true"  />
              <b:inputText id="age" value="&num;{userBean.age}"
                           label="What's your age?"  />
            </b:form>
          </b:well>
          ]]>
          </script>
        </b:well>
      </b:tab>
      <b:tab title="stacked form">
        <b:well style="height:180px">
          <h:form>
            <b:inputText id="name" value="#{userBean.name}" col-md="6"
                         label="Enter your name" required="true"  />
            <b:inputText id="age" value="#{userBean.age}" col-md="6"
                         label="What's your age?"  />
          </h:form>
        </b:well>
      </b:tab>
      <b:tab title="JSF markup (stacked)">
        <b:well style="height:180px">
          <script type="syntaxhighlighter"
          class="brush: xml; toolbar: false;gutter: false; first-line: 1">
          <![CDATA[
          <b:well style="height:180px">
            <h:form>
              <b:inputText id="name" value="&num;{userBean.name}" col-md="6"
                           label="Enter your name" required="true"  />
              <b:inputText id="age" value="&num;{userBean.age}" col-md="6"
                           label="What's your age?"  />
            </h:form>
          </b:well>
          ]]>
          </script>
        </b:well>
      </b:tab>
    </b:tabView>


    <h2><a id="configuring_the_default_value_of_the">Configuring the default value of the</a><code>renderLabel</code> attribute</h2>
    <p>Strictly speaking, BootsFaces adds a second meaning to an attribute that already exists. Standard JSF uses<code>label</code>
    to decorate <code>&lt;h:message /&gt;</code>. In order to minimize confusion, we decided to deactivate
    the label rendering feature of BootsFaces by default. However, at the end of the day, it's your application.
    So it's you who needs to be in charge. Starting with BootsFaces 0.8.5, you can add a context parameter to the
    <code>web.xml</code> of your application to set the default value of <code>renderLabel</code>. It goes without
    saying that you can use EL expressions with this attribute. We traded performance to give you maximum flexibility.</p>

    <b:panel title="Live preview" look="info" collapsible="false">
      <b:form>
        <b:inputText id="age" value="#{userBean.age}" label="What's your age?" />
        <h:message for="age" />
        <b:commandButton update="@form" value="Toggle renderLabel default attribute" onclick="ajax:defaultValuesBean.toggleRenderLabel()"/>
      </b:form>

      <f:facet name="footer">
        <b:tabView activeIndex="0"  contentStyle="border-right: 1px solid #ddd;border-left: 1px solid #ddd;border-bottom: 1px solid #ddd;padding:10px">
          <b:tab title="JSF markup">
            <b:panel>
              <script type="syntaxhighlighter"
              class="brush: xml; toolbar: false;gutter: false; first-line: 1">
              <![CDATA[
              <b:form>
                <b:inputText id="age" value="#{userBean.age}" label="What's your age?" />
                <h:message for="age" />
                <b:commandButton update="@form" value="Toggle renderLabel default attribute" onclick="ajax:defaultValuesBean.toggleRenderLabel()"/>
              </b:form>
              ]]>
              </script>
            </b:panel>
          </b:tab>
          <b:tab title="web.xml">
            <b:panel>
              <script type="syntaxhighlighter"
              class="brush: xml; toolbar: false;gutter: false; first-line: 1">
              <![CDATA[
              <context-param>
              <param-name>net.bootsfaces.defaults.renderLabel</param-name>
              <param-value>&num;{defaultValuesBean.renderLabel}</param-value>
              </context-param>
              ]]>
              </script>
            </b:panel>
          </b:tab>
          <b:tab title="Java Bean">
            <b:panel>
              <script type="syntaxhighlighter"
              class="brush: java toolbar: false;gutter: false; first-line: 1">
              <![CDATA[
              @ManagedBean
              @SessionScoped
              public class DefaultValuesBean implements Serializable {
                private static final long serialVersionUID = 1L;

                private boolean renderLabel=true;

                public boolean isRenderLabel() {
                  return renderLabel;
                }

                public void setRenderLabel(boolean renderLabel) {
                  this.renderLabel = renderLabel;
                }

                public void toggleRenderLabel() {
                  renderLabel=!renderLabel;
                }
              }
              ]]>
              </script>
            </b:panel>
          </b:tab>
        </b:tabView>
      </f:facet>
    </b:panel>

    <h2><code>id</code> vs. <code>fieldId</code>, or how to be compatible to JAAS <b:badge value="since 0.9.0" /></h2>
    <p>BootsFaces adds some Bootstrap code to the HTML input field. This often leads to problems with the ids.
    Intuitively, most developers expect the id of the <code>&lt;b:inputText&gt;</code> to be identical
    to the id of the <code>&lt;h:input&gt;</code> field. At the same time they expect that AJAX updates the
    input field when the update attribute is <code>&lt;b:inputText id="firstNameID" update="firstNameId" /&gt;</code>.
    </p>
    <p>
    To solve the problem, we've introduced a second id, the <code>fieldId</code>. The <code>fieldId</code>
    is the id of the input field itself, while the attribute <code>id</code> refers to the entire component.</p>
    <p>Similarly, you can optionally set the attribute <code>name</code>.</p>
    <p> Note that in this case the
    ids of the container are not added automatically. You are responsible to make the ids and names unique.</p>

    <p>This feature comes in handy if you're working with JAAS, which requires the id and the name of the field
    to be "j_username" and "j_password":
    </p>
    <b:panel title="Live preview" look="info" collapsible="false">
      <b:form id="loginForm">
        <b:inputText id="usernameDiv" fieldId="j_username" name="j_username"
                     value="#{loginBean.username}"
                     label="Username" />
        <b:message for="@previous" />
        <b:inputSecret id="passwordDiv" fieldId="j_password" name="j_password"
                       value="#{loginBean.password}"
                       label="Password"  />
        <b:message for="passwordDiv" />
        <b:commandButton update="@form" value="Login" onclick="ajax:loginBean.login2()"/>
      </b:form>

      <f:facet name="footer">
        <b:tabView activeIndex="0"  contentStyle="border-right: 1px solid #ddd;border-left: 1px solid #ddd;border-bottom: 1px solid #ddd;padding:10px">
          <b:tab title="JSF markup">
            <b:panel>
              <script type="syntaxhighlighter"
              class="brush: xml; toolbar: false;gutter: false; first-line: 1">
              <![CDATA[
              <b:form id="loginForm">
                <b:inputText id="usernameDiv" fieldId="j_username" name="j_username"
                             value="&num;{loginBean.username}"
                             label="Username" />
                <b:message for="@previous" />
                <b:inputSecret id="passwordDiv" fieldId="j_password" name="j_password"
                               value="&num;{loginBean.password}"
                               label="Password"  />
                <b:message for="passwordDiv" />
                <b:commandButton update="@form" value="Login" onclick="ajax:loginBean.login2()"/>
              </b:form>
              ]]>
              </script>
            </b:panel>
          </b:tab>
          <b:tab title="Generated HTML code">
            <b:panel>
              <script type="syntaxhighlighter"
              class="brush: xml; toolbar: false;gutter: false; first-line: 1">
              <![CDATA[
              <form id="loginForm" name="loginForm" method="post" action="/forms/inputText.jsf">
              <input name="loginForm" value="loginForm" type="hidden">
              <div id="loginForm:usernameDiv" class="form-group">
                <label for="j_username" class=" bf-required control-label">Username</label>
                <input id="j_username" name="j_username" class="form-control bf-required" type="text">
              </div>
              <div id="loginForm:passwordDiv" class="form-group">
                <label for="j_password" class=" bf-required control-label">Password</label>
                <input id="j_password" name="j_password" class="form-control bf-required" type="password">
              </div>
              <button type="submit" id="loginForm:j_idt374" name="loginForm:j_idt374" class="btn btn-default" onclick=";BsF.ajax.callAjax(this, event,'loginForm','@all', null, null, null, 'click');;return false;">Login</button>
              <input name="javax.faces.ViewState" id="j_id1:javax.faces.ViewState:17" value="-5842159633617827590:2195699539473824674" autocomplete="off" type="hidden">
              </form>
              ]]>
              </script>
            </b:panel>
          </b:tab>
        </b:tabView>
      </f:facet>
    </b:panel>

    <h2><a id="responsive_design">Responsive design</a><b:badge value="since 0.9.0" /></h2>
    <p>You can use all the attributes controlling the responsive behaviour of <code>&lt;b:column /&gt;</code>
    also with <code>&lt;b:inputText /&gt;</code>. Note that this is equivalent to putting it into a
    <code>&lt;b:column /&gt;</code>. In particular, the CSS styles are inside the column div. Responsive design only applies to horizontal forms.
    </p>
    <b:panel title="Live preview" look="info" collapsible="false">

      <b:form horizontal="true">
        <b:inputText value="large-screen='full-width'" large-screen="full-width" />
        <b:formGroup>
          <b:inputText value="large-screen='one-third'" large-screen="one-third" />
          <b:inputText value="large-screen='two-thirds'" large-screen="two-thirds" />
        </b:formGroup>
        <b:formGroup>
          <b:inputText value="small-screen='one-third'" small-screen="one-third" />
          <b:inputText value="small-screen='two-thirds'" small-screen="two-thirds" />
        </b:formGroup>
        <b:formGroup>
          <b:inputText value="tiny-screen='one-fourth'" tiny-screen="one-fourth" />
          <b:inputText value="tiny-screen='half' offset-sm='3'" tiny-screen="half" offset-sm="3" />
        </b:formGroup>
      </b:form>

      <f:facet name="footer">
        <strong>JSF markup:</strong>
        <b:panel>
          <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
          <![CDATA[
          <b:form horizontal="true">
            <b:inputText value="large-screen='full-width'" large-screen="full-width" />
            <b:formGroup>
              <b:inputText value="large-screen='one-third'" large-screen="one-third" />
              <b:inputText value="large-screen='two-thirds'" large-screen="two-thirds" />
            </b:formGroup>
            <b:formGroup>
              <b:inputText value="small-screen='one-third'" small-screen="one-third" />
              <b:inputText value="small-screen='two-thirds'" small-screen="two-thirds" />
            </b:formGroup>
            <b:formGroup>
              <b:inputText value="tiny-screen='one-fourth'" tiny-screen="one-fourth" />
              <b:inputText value="tiny-screen='half' offset-sm='3'" tiny-screen="half" offset-sm="3" />
            </b:formGroup>
          </b:form>
          ]]></script>
        </b:panel>
      </f:facet>
    </b:panel>

    <p><b>Using the <code>span</code> attribute for responsive design</b></p>
    <p>The <code>span</code> attribute is a short-hand notation for <code>col-md</code>
    or <code>medium-screen</code>:</p>


    <b:panel title="Live preview" look="info">
      In a row:
      <b:row>
        <b:form>
          <b:inputText span="1" placeholder="span1" />
          <b:inputText span="2" placeholder="span 2" />
          <b:inputText span="3" placeholder="span 3" />
        </b:form>
      </b:row>
      or in an horizontal Form:
      <b:form horizontal="true">
        <b:formGroup>
          <b:inputText span="1" placeholder="span1" />
          <b:inputText span="2" placeholder="span 2" />
          <b:inputText span="3" placeholder="span 3" />
          <b:inputText span="6" placeholder="span 6" />
        </b:formGroup>
        <b:formGroup>
          <b:inputText span="9" placeholder="span 9" />
        </b:formGroup>
        <b:formGroup>
          <b:inputText span="12" placeholder="span 12" />
        </b:formGroup>
      </b:form>

      <f:facet name="footer">
        <strong>JSF markup:</strong>
        <b:panel>
          <script type="syntaxhighlighter"
          class="brush: xml; toolbar: false;gutter: false; first-line: 1">
          <![CDATA[
          In a row:
          <b:row>
            <b:form>
              <b:inputText span="1" placeholder="span1" />
              <b:inputText span="2" placeholder="span 2" />
              <b:inputText span="3" placeholder="span 3" />
            </b:form>
          </b:row>
          or in an horizontal Form:
          <b:form horizontal="true">
            <b:formGroup>
              <b:inputText span="1" placeholder="span1" />
              <b:inputText span="2" placeholder="span 2" />
              <b:inputText span="3" placeholder="span 3" />
              <b:inputText span="6" placeholder="span 6" />
            </b:formGroup>
            <b:formGroup>
              <b:inputText span="9" placeholder="span 9" />
            </b:formGroup>
            <b:formGroup>
              <b:inputText span="12" placeholder="span 12" />
            </b:formGroup>
          </b:form>
          ]]>
          </script>
        </b:panel>
      </f:facet>
    </b:panel>


    <h2><a id="visibility_depending_on_screen_size">Visibility depending on screen size</a><b:badge value="since 0.8.6/0.9.0" /></h2>
    <p>You can play also with col-*-*, visible and hidden attribute, as any bootstrap elements. For example:</p>
    <br/>
    <b:panel title="Live preview" look="info" collapsible="false">
      <b:form horizontal="true">
        <b:inputText placeholder="Visible on medium or large screen" visible="md..." label="Visible on &gt;= md:"  label-col-md="2" col-md="10" />
        <b:inputText placeholder="Visible on small-screen" visible="...sm" label="Visible on &lt;= sm:"  label-col-md="2" col-md="10"/>
        <b:inputText placeholder="Visible on small to large screen" visible="sm...lg" label="Visible on sm...lg:"  label-col-md="2" col-md="10"/>
        <b:inputText placeholder="Visible on tiny and medium screen" visible="xs,md" label="Visible on xs and md:"  label-col-md="2" col-md="10"/>
        <b:inputText placeholder="col-md-6, offset 2" label="Col-md-6, offset 2:"  label-col-md="2" col-md="6" offset="2" />
      </b:form>

      <f:facet name="footer">
        <strong>JSF markup:</strong>
        <b:panel>
          <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
          <![CDATA[
          <b:form horizontal="true">
            <b:inputText placeholder="Visible on medium or large screen" visible="md..." label="Visible on &gt;= md:" label-col-md="2" col-md="10" />
            <b:inputText placeholder="Visible on small-screen" visible="...sm" label="Visible on &lt;= sm:" label-col-md="2" col-md="10"/>
            <b:inputText placeholder="Visible on small to large screen" visible="sm...lg" label="Visible on sm...lg:" label-col-md="2" col-md="10"/>
            <b:inputText placeholder="Visible on tiny and medium screen" visible="xs,md" label="Visible on xs and md:" label-col-md="2" col-md="10"/>
            <b:inputText placeholder="col-md-6, offset 2" label="Col-md-6, offset 2:" label-col-md="2" col-md="6" offset="2" />
          </b:form>
          ]]></script>
        </b:panel>
      </f:facet>
    </b:panel>

    <h2><a id="tags">Tags</a><b:badge value="since 0.9.0" /></h2>
    <p>By setting the attribute <code>tags="true"</code> you can display the input values as tag - similar to
    <code>&lt;b:badge /&gt;</code> or to price tags in the supermarket. The tags are separated by commas. Users can
    separate tags either by tying a comma or by hitting the <code>return</code> key.</p>
  <p>We've dedicated a special <h:link outcome="inputTextWithTags.jsf">showcase page to the input text tags</h:link>.</p>

    <h2><a id="mask">Mask</a><b:badge value="since 1.1.2" /><b:badge value="improved with 1.2.1" /></h2>
    <p>
    An input mask can be set using the <code>mask</code> attribute.
    Default masking definitions:
    </p>
    <ul>
      <li><code>9</code>: numeric</li>
      <li><code>a</code>: alphabetical</li>
      <li><code>*</code>: alphanumeric</li>
      <li><code>A</code>: alphabetical, upper case</li>
      <li><code>&amp;amp;</code>: alphanumerical upper case (note that you have to escape the &amp; character in JSF)</li>
      <li><code>currency</code>: currency (only dollars)</li>
      <li><code>email</code>: email address</li>
      <li><code>numeric</code>: numeric values</li>
      <li><code>decimal</code>: synonym of numeric</li>
      <li><code>integer</code>: integer values</li>
      <li><code>numeric</code>: integer values</li>
      <li><code>h</code>: hours</li>
      <li><code>s</code>: seconds or minutes (number in the range between 0 and 59)</li>
      <li><code>m</code>: simple month</li>
      <li><code>y</code>: simple year</li>
      <li><code>mm/dd/yyyy</code>: American date</li>
      <li><code>dd/mm/yyyy</code>: French and Italien date</li>
      <li><code>dd.mm.yyyy</code>: German date (complete list at
      <a target="#" href="https://github.com/RobinHerbots/Inputmask/blob/4.x/README_date.md">https://github.com/RobinHerbots/Inputmask/blob/4.x/README_date.md</a>)</li>
    </ul>
    <p>
    Masks can also contain a variable number of tokens. For example: <code>9-a{1,3}9{1,3}</code>.
    This first number in the curly braces defines the minimum number of characters. The
    second number specifies the maximum number of characters.
    Optional masks can be defined by putting them into square brackets: <code>9{1,3}[,999]</code>.
    </p>
    <p>
    When a mask starts with <code>{</code> it is considered to be a JSON object. This allows you to use more advanced masks,
    for example using a regular expression: <code>{ regex: '\\d*' }</code>,
    or set greedy to false: <code>{ mask: '9[-9999]', greedy: false }</code>.
    Read the full documentation at the project page of the
    <a target="#" href="https://github.com/RobinHerbots/Inputmask">underlying JavaScript plugin</a>
    written by Robin Herbots.
    </p>
    <b:panel title="Live preview" look="info" collapsible="false">
      <h:form>
        <b:panelGrid columns="2">
          <b:inputText value="#{inputTextBean.text}"
                       mask="aaa-99999-&amp;"
                       label="three letters, five digits" render-label="true"/>
          <b:inputText value="#{inputTextBean.text}"
                       mask="€9{1,6}.99"
                       label="Currency (Euro, up to six digits plus two digits precision)" render-label="true"/>
          <b:inputText value="#{inputTextBean.text}"
                       mask="$9{1,3}[,999].99"
                       label="Currency ($, up to six digits plus two digits precision)" render-label="true"/>
          <b:inputText value="#{inputTextBean.text}"
                       mask="currency"
                       label="American currency" render-label="true"/>
          <b:inputText value="#{inputTextBean.text}"
                       mask="dd.mm.yyyy"
                       label="Date (dd.mm.yyyy)" render-label="true"/>
          <b:inputText value="#{inputTextBean.text}"
                       mask="decimal"
                       label="decimal" render-label="true"/>
          <b:inputText value="#{inputTextBean.text}"
                       mask="numeric"
                       label="numeric" render-label="true"/>
          <b:inputText value="#{inputTextBean.text}"
                       mask="integer"
                       label="integer" render-label="true"/>
          <b:inputText value="#{inputTextBean.text}"
                       mask="email"
                       label="Email address" render-label="true"/>
          <b:inputText value="#{inputTextBean.text}"
                       mask="A{1,3}-A{1,2} 9{1,4}"
                       label="German number plate with capital letters" render-label="true"/>
          <b:inputText value="#{inputTextBean.text}"
                       mask="{regex:'[0-9\u0600-\u06FF]*'}"
                       label="Regular expression '[\u0600-\u06FF]*' (Arabic) (since 1.2.1)" render-label="true"/>
        </b:panelGrid>

      </h:form>

      <f:facet name="footer">
        <strong>JSF markup:</strong>
        <b:panel>
          <script type="syntaxhighlighter"
          class="brush: xml; toolbar: false;gutter: false; first-line: 1">
          <![CDATA[
          <b:panelGrid columns="2">
            <b:inputText value="&num;{inputTextBean.text}"
                         mask="aaa-99999"
                         label="three letters, five digits" render-label="true"/>
            <b:inputText value="&num;{inputTextBean.text}"
                         mask="€9{1,6}.99"
                         label="Currency (Euro, up to six digits plus two digits precision)" render-label="true"/>
            <b:inputText value="&num;{inputTextBean.text}"
                         mask="$9{1,3}[,999].99"
                         label="Currency ($, up to six digits plus two digits precision)" render-label="true"/>
            <b:inputText value="&num;{inputTextBean.text}"
                         mask="currency"
                         label="American currency" render-label="true"/>
            <b:inputText value="&num;{inputTextBean.text}"
                         mask="dd.mm.yyyy"
                         label="Date (dd.mm.yyyy)" render-label="true"/>
            <b:inputText value="&num;{inputTextBean.text}"
                         mask="decimal"
                         label="decimal" render-label="true"/>
            <b:inputText value="&num;{inputTextBean.text}"
                         mask="numeric"
                         label="numeric" render-label="true"/>
            <b:inputText value="&num;{inputTextBean.text}"
                         mask="integer"
                         label="integer" render-label="true"/>
            <b:inputText value="&num;{inputTextBean.text}"
                         mask="email"
                         label="Email address" render-label="true"/>
            <b:inputText value="&num;{inputTextBean.text}"
                         mask="A{1,3}-A{1,2} 9{1,4}"
                         label="German number plate with capital letters" render-label="true"/>
            <b:inputText value="&num;{inputTextBean.text}"
                         mask="{regex:'[0-9\u0600-\u06FF]*'}"
                         label="Regular expression '[\u0600-\u06FF]*' (Arabic) (since 1.2.1)" render-label="true"/>
          </b:panelGrid>
          ]]>
          </script>
        </b:panel>
      </f:facet>
    </b:panel>

    <h2><a id="reference_section">Reference section</a></h2>
    <ui:include src="InputTextAttributes.xhtml" />

    <b:panel look="info">
      <f:facet name="heading">
        <b>Skinning</b>
      </f:facet>
      <ul>
        <li>
          <code>&lt;b:inputfield /&gt;</code> is an <code>input</code> tag bearing the CSS-class <code>form-control</code>.
        </li>
        <li>
          If the attribute <code>required</code> is true, the pseudo CSS class <code>bf-required</code> is added.
          Thus you can define your custom style for required fields.
        </li>
        <li>
          If there's a <code>FacesMessage</code>, the input field is bears one of the pseudo CSS classes
          <code>bf-info</code>, <code>bf-warning</code>, <code>bf-error</code> or <code>bf-fatal</code>. If there are no messages,
          the input field bears the pseudo CSS class <code>bf-no-message</code>  and <code>has-success</code>. The latter colors the label green by default.
        </li>
        <li>If there's a label, it bears the CSS class <code>required</code>, if it's a mandatory field.
          This class adds an asterisk to the label text. You can override the CSS class to remove the asterisk
        or to replace it by something else.</li>
        <li>If there's a label, it bears the CSS classes <code>bf-info</code>, <code>bf-warning</code>,
          <code>bf-error</code> or <code>bf-fatal</code>, depending on which severity the error message the input field has.
          The latter two classes color the label red.<br />
          If there's no message,
          the label bears the pseudo CSS class <code>bf-no-message</code>  and <code>has-success</code>. The latter colors the label green by default.
        </li>
      </ul>
    </b:panel>

    <script type="text/javascript">
    SyntaxHighlighter.all();
    </script>
  </ui:define>
</ui:composition>
