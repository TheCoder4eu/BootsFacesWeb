<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:h="http://java.sun.com/jsf/html" xmlns:f="http://java.sun.com/jsf/core"
      xmlns:b="http://bootsfaces.net/ui" xmlns:jsf="http://xmlns.jcp.org/jsf"
      xmlns:pt="http://xmlns.jcp.org/jsf/passthrough" xmlns:ui="http://java.sun.com/jsf/facelets">
  <h:head>
    <title>BootsFaces: next-gen JSF Framework</title>
  <meta name="author" content="Riccardo Massera"></meta>
  </h:head>
  <h:body style="padding-top: 60px">
    <ui:composition template="/applayout/pageTemplate.xhtml">

      <ui:define name="content-navigator">
        <b:listLinks>
          <b:navLink href="#radiobuttons" value="Radiobuttons" />
          <b:navLink href="#required_fields" value="Required fields" />
          <b:navLink href="#traditional_jsf_approach" value="Traditional JSF approach" />
          <b:navLink href="#using_lists_and_hashmaps" value="Using lists and hashmaps" />
          <b:navLink href="#ajax" value="AJAX" />
          <b:navLink href="#reference_section" value="Reference section" />
        </b:listLinks>
      </ui:define>


      <ui:define name="content">
        <style>label.disabled { color:#ccc}
        </style>
        <h1><a id="radiobuttons">Radiobuttons</a><b:badge value="since 1.0" /></h1>
        <p>The BootsFaces radiobutton give you more flexibility to design your page layout than the standard JSF radiobutton.</p>
        <p>For the sake of compatibility, you can follow the traditional JSF approach using <code>&lt;f:selectItem /&gt;</code>
        or <code>&lt;f:selectItems /&gt;</code>. But that only allows for very simple
        layouts (the buttons are vertical, and no element except the label can be between the buttons). In particular,
        you can't embed the radiobuttons in a multi-column Bootstrap grid. So BootsFaces offers a more flexible
        version. The drawback is that you have to add an extra attribute defining which radio buttons belong together.
        We chose the <code>value</code> value attribute for this. So you have to repeat the <code>value</code> attribute
        with every option of the radio button in order to indicate which buttons belong to a common group:</p>

        <b:panel title="Live preview" look="info" collapsible="false">
          <b:form>
            <p>Which Java version do you use?</p>
            <b:panelGrid size="xs" columns="6">
              <b:radiobutton value="#{radiobuttonBean.javaVersion}" itemLabel="Java 7" itemValue="7" required="true" />
              <b:radiobutton value="#{radiobuttonBean.javaVersion}" itemLabel="Java 8(LTS)" itemValue="8" />
              <b:radiobutton value="#{radiobuttonBean.javaVersion}" itemLabel="Java 9" itemValue="9" disabled="true"/>
              <b:radiobutton value="#{radiobuttonBean.javaVersion}" itemLabel="Java 10" itemValue="10" disabled="true"/>
              <b:radiobutton value="#{radiobuttonBean.javaVersion}" itemLabel="Java 11(LTS)" itemValue="11" />
              <b:radiobutton value="#{radiobuttonBean.javaVersion}" itemLabel="Java 14" itemValue="14" />
            </b:panelGrid>
            <b:commandButton value="submit your choice" action="#{radiobuttonBean.submit}" look="primary" update="@form" />
            <b:messages />
            <b:message for="@form:@property(radiobuttonBean.javaVersion)" />
          </b:form>
          <f:facet name="footer">
            <strong>JSF markup:</strong>
            <b:panel>
              <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
              <![CDATA[
              <b:form>
                <p>Which Java version do you use?</p>
                <b:panelGrid size="xs" columns="6">
                  <b:radiobutton value="&num;{radiobuttonBean.javaVersion}" itemLabel="Java 7" itemValue="7" required="true" />
                  <b:radiobutton value="&num;{radiobuttonBean.javaVersion}" itemLabel="Java 8(LTS)" itemValue="8" />
                  <b:radiobutton value="&num;{radiobuttonBean.javaVersion}" itemLabel="Java 9" itemValue="9" disabled="true"/>
                  <b:radiobutton value="&num;{radiobuttonBean.javaVersion}" itemLabel="Java 10" itemValue="10" disabled="true"/>
                  <b:radiobutton value="&num;{radiobuttonBean.javaVersion}" itemLabel="Java 11(LTS)" itemValue="11" />
                  <b:radiobutton value="&num;{radiobuttonBean.javaVersion}" itemLabel="Java 14" itemValue="14" />
                </b:panelGrid>
                <b:commandButton value="submit your choice" action="&num;{radiobuttonBean.submit}" look="primary" update="@form" />
                <b:messages />
                <b:message for="@form:@property(radiobuttonBean.javaVersion)" />
              </b:form>]]></script>
            </b:panel>
          </f:facet>
        </b:panel>

        <p>Note that the radiobuttons are implemented as an HTML &lt;div&gt; tag, so by default, the radiobuttons
        are still stacked on each by default. That's why we wrapped them in a &lt;b:panelGrid /&gt; in the example
        above.</p>

        <h2><a id="required_fields">Required fields</a></h2>
        <p>You can declare a radiobutton group mandatory by adding the attribute <code>required="true"</code>
        to the first radiobutton. The label of the first radio button is used in the error message.
        If you want to show a custom error message, use the attribute <code>required-message</code>.</p>
        <p>Required inputs fields and their labels both bear the CSS class <code>bf-required</code>.</p>
        <p>If the field has a FacesMessage, one of the CSS classes <code>bf-info</code>, <code>bf-warning</code>,
        <code>bf-error</code> or <code>bf-fatal</code>, depending on which error severity the message has.
        The latter two classes color the label red. </p>
        <p>If there's no message, the field and its label bear the pseudo CSS classes <code>bf-no-message</code>
        and <code>has-success</code>. The latter colors the label green by default.
        </p>


        <h2><a id="traditional_jsf_approach">Traditional JSF approach</a></h2>
        <p>For the sake of convenience and back-ward compatibility, BootsFaces also supports the traditional
        JSF API using <code>&lt;f:selectItem /&gt;</code>. Of course, you loose a lot of flexibility.
        The radiobuttons are stacked on top of each other, and the only way to change this is using
        clever CSS tricks.</p>


        <b:panel title="Live preview" look="info" collapsible="false">
          <b:form>
            <b:radiobutton value="#{radiobuttonBean.favoriteColor}">
              <f:selectItem itemValue="Red"   itemLabel="Red it is!" />
              <f:selectItem itemValue="Green" itemLabel="I love green colors." />
              <f:selectItem itemValue="Blue"  itemLabel="What about blue?" />
            </b:radiobutton>
            <b:commandButton value="submit your choice" action="#{radiobuttonBean.submitColor}"
                             look="primary" update="@form" />
            <b:message for="@form:@property(radiobuttonBean.favoriteColor)"
                       style="#{radiobuttonBean.favoriteColor=='Green'?'background-image:none;background-color:#0c0;color:white':''}"/>
          </b:form>
          <f:facet name="footer">
            <strong>JSF markup:</strong>
            <b:panel>
              <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0"><![CDATA[
              <b:form>
                <p>What's your favorite color?</p>
                <b:radiobutton value="&num;{radiobuttonBean.favoriteColor}">
                  <f:selectItem itemValue="Red"   itemLabel="Red it is!" />
                  <f:selectItem itemValue="Green" itemLabel="I love green colors." />
                  <f:selectItem itemValue="Blue"  itemLabel="What about blue?" />
                </b:radiobutton>
                <b:commandButton value="submit your choice" action="&num;{radiobuttonBean.submitColor}"
                                 look="primary" update="@form" />
                <b:message for="@form:@property(radiobuttonBean.favoriteColor)"
                           style="&num;{radiobuttonBean.favoriteColor=='Green'?'background-image:none;background-color:#0c0;color:white':''}"/>
              </b:form>
              ]]></script>
            </b:panel>
          </f:facet>
        </b:panel>


        <h2><a id="using_lists_and_hashmaps">Using lists and hashmaps</a></h2>
        <p><code>&lt;f:selectItems /&gt;</code> allows you to generate the radio buttons from a list or a map. You can
        use the attribute <code>itemDisabled="true"</code> to disable individual items within this list.</p>

        <b:panel title="Live preview" look="info" collapsible="false">
          <b:form>
            <p>What's your favorite band?</p>
            <b:radiobutton value="#{radiobuttonBean.favoriteBand}">
              <f:selectItems value="#{radiobuttonBean.bands}" var="item" itemDisabled="#{item.equals('rock')}" />
              <f:selectItem itemValue="#{null}" itemLabel="None of the above" />
            </b:radiobutton>
            <b:commandButton value="submit your choice" action="#{radiobuttonBean.submitBand}"
                             look="primary" update="@form" />
            <b:message for="@form:@property(radiobuttonBean.favoriteBand)"
                       />
          </b:form>
          <f:facet name="footer">
            <b:tabView contentStyle="border-right: 1px solid #ddd;border-left: 1px solid #ddd;border-bottom: 1px solid #ddd;padding:10px">
              <b:tab title="JSF markup">
                <b:panel>
                  <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0"><![CDATA[
                  <b:form>
                    <p>What's your favorite band?</p>
                    <b:radiobutton value="&num;{radiobuttonBean.favoriteBand}">
                      <f:selectItems value="&num;{radiobuttonBean.bands}" var="item" itemDisabled="#{item.equals('rock')}" />
                      <f:selectItem itemValue="" itemLabel="None of the above" />
                    </b:radiobutton>
                    <b:commandButton value="submit your choice" action="&num;{radiobuttonBean.submitBand}"
                                     look="primary" update="@form" />
                    <b:message for="@form:@property(radiobuttonBean.favoriteBand)" />
                  </b:form>
                  ]]></script>
                </b:panel>
              </b:tab>
              <b:tab title="Java Bean">
                <b:panel>
                  <script type="syntaxhighlighter" class="brush: java; toolbar: false;first-line: 0"><![CDATA[
                  @RequestScoped
                  @ManagedBean
                  public class RadiobuttonBean implements Serializable {
                    private static final long serialVersionUID = 1L;
                    private Map<String, String> bands = new HashMap<String, String>();

                    public RadiobuttonBean() {
                      getBands().put("Arch Enemy", "melodic death metal");
                      getBands().put("Blind Guardian", "speed metal");
                      getBands().put("Fields of the Nephilim", "gothic metal");
                      getBands().put("Led Zeppelin (disabled)", "rock");
                    }
                    public void submitBand() {
                      if (favoriteBand == null || favoriteBand.equals("")) {
                        FacesMessages.warning("@property(radiobuttonBean.favoriteBand)", "", "You seem to be a bit indecisive.");
                      } else {
                        FacesMessages.info("@property(radiobuttonBean.favoriteBand)", "", "So you like " + favoriteBand + ".");
                      }
                    }
                    public Map<String, String> getBands() {
                      return bands;
                    }

                    public void setBands(Map<String, String> bands) {
                      this.bands = bands;
                    }

                    public String getFavoriteBand() {
                      return favoriteBand;
                    }

                    public void setFavoriteBand(String favoriteBand) {
                      this.favoriteBand = favoriteBand;
                    }
                  }
                  ]]></script>
                </b:panel>
              </b:tab>
            </b:tabView>
          </f:facet>
        </b:panel>

        <h2><a id="ajax">AJAX</a><b:badge value="since 1.1.0" /></h2>
        <p>Since BootsFaces 1.1.0, radio buttons also support AJAX. More precisely, it supports the click event. The attribute
        <code>update</code> must be repeated for each radio button of the radio button group.
        However, you can't define different update areas for each radio button. The first radiobutton decides which method is called
        and which part of the page is updated.</p>
        <b:panel title="Live preview" look="info" collapsible="false">
          <b:form>
            <p>Which Java version do you use?</p>
            <b:panelGrid size="xs" columns="4">
              <b:radiobutton onclick="ajax:radiobuttonBean.submit()" update="@form" value="#{radiobuttonBean.javaVersion}" itemLabel="Java 6" itemValue="6" />
              <b:radiobutton update="@form" value="#{radiobuttonBean.javaVersion}" itemLabel="Java 7" itemValue="7" />
              <b:radiobutton update="@form" value="#{radiobuttonBean.javaVersion}" itemLabel="Java 8" itemValue="8" />
              <b:radiobutton value="#{radiobuttonBean.javaVersion}" itemLabel="Java 9" itemValue="9" disabled="true"/>
            </b:panelGrid>
            <b:messages />
          </b:form>
          <f:facet name="footer">
            <strong>JSF markup:</strong>
            <b:panel>
              <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0"><![CDATA[
              <style>
                label.disabled {
                  color: #ccc;
                }
              </style>

              <p>Which Java version do you use?</p>
              <b:panelGrid size="xs" columns="3">
                <b:radiobutton onclick="ajax:radiobuttonBean.submit()" update="@form" value="&num;{radiobuttonBean.javaVersion}" itemLabel="Java 6" itemValue="6" />
                <b:radiobutton update="@form" value="&num;{radiobuttonBean.javaVersion}" itemLabel="Java 7" itemValue="7" />
                <b:radiobutton update="@form" value="&num;{radiobuttonBean.javaVersion}" itemLabel="Java 8" itemValue="8" />
                <b:radiobutton value="&num;{radiobuttonBean.javaVersion}" itemLabel="Java 9" itemValue="9" disabled="true"/>
              </b:panelGrid>
              <b:messages />]]></script>
            </b:panel>
          </f:facet>
        </b:panel>


        <h2><a id="reference_section">Reference section</a></h2>
        <ui:include src="RadiobuttonAttributes.xhtml" />
        <b:panel look="info">
          <f:facet name="heading" rendered="false">
            <b>Skinning</b>
          </f:facet>
          <ul>
            <li>Tell the world which CSS classes can be used to change the look of the component.</li>
          </ul>
        </b:panel>

        <script type="text/javascript">
        SyntaxHighlighter.all();
        </script>

      </ui:define>
    </ui:composition>
  </h:body>
</html>
