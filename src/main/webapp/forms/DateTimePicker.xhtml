<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<ui:composition template="/applayout/pageTemplate.xhtml" xmlns="http://www.w3.org/1999/xhtml"
                xmlns:h="http://java.sun.com/jsf/html" xmlns:f="http://java.sun.com/jsf/core" xmlns:b="http://bootsfaces.net/ui"
                xmlns:ui="http://java.sun.com/jsf/facelets">


  <ui:define name="content-navigator">
    <b:listLinks>
      <b:navLink href="#datetimepicker" value="DateTimePicker" />
      <b:navLink href="#basic_usage" value="Basic usage" />
      <b:navLink href="#mode" value="mode=inline" />
      <b:navLink href="#disable_and_readonly" value="Disable and readonly" />
      <b:navLink href="#formatting_and_locale" value="Formatting and locale" />
      <b:navLink href="#datetimepicker_widget_inside_an_overflow_area" value="DateTimePicker widget inside an overflow area" />
      <b:navLink href="#labels" value="Labels, required fields and error messages" />
      <b:navLink href="#datetimepicker_ajax" value="DateTimePicker AJAX" />
      <b:navLink href="#id_and_field" value="id and field-id" />
      <b:navLink href="#reference_section" value="Reference section" />
    </b:listLinks>
  </ui:define>


  <ui:define name="content">
    <h1><a id="datetimepicker">DateTimePicker (&lt;b:dateTimePicker /&gt;)</a></h1>

    <h2><a id="basic_usage">Basic usage</a></h2>
    <p>The dateTimePicker is a responsive input field that allows you to input the date, the time or both.</p>

    <b:panel title="Live preview" look="info" collapsible="false">
      <h:form>
        <b:panelGrid columns="2">
          <b:dateTimePicker value="#{dateTimeBean.justNow}"
                            allow-input-toggle="#{dateTimeBean.allowInputToggle}"
                            icon-position="#{dateTimeBean.iconPosition}"
                            mode="#{dateTimeBean.mode}"
                            side-by-side="#{dateTimeBean.sideBySide}"
                            show-date="#{dateTimeBean.showDate}"
                            show-time="#{dateTimeBean.showTime}"
                            show-icon="#{dateTimeBean.showIcon}"
                            use-current="#{dateTimeBean.useCurrent}"
                            week-days-disabled="#{dateTimeBean.weekDaysDisabled}"
                            disabled-dates="#{dateTimeBean.disabledDates}"
                             />
          <b:panel title="Settings" look="primary">
            <b:panelGrid columns="1" id="settings">
              <b:selectBooleanCheckbox value="#{dateTimeBean.modeInline}" caption="mode='inline' (default is 'popup')"
                                       onclick="ajax:dateTimeBean.updateSettings()"
                                       update="@form" />
              <b:selectBooleanCheckbox value="#{dateTimeBean.showIcon}" caption="showIcon='true' (default)"
                                       onclick="ajax:dateTimeBean.updateSettings()"
                                       update="@form" />
              <b:selectBooleanCheckbox value="#{dateTimeBean.iconLeft}" caption="iconPosition='left' (default is 'right')"
                                       onclick="ajax:dateTimeBean.updateSettings()"
                                       update="@form" />
              <b:selectBooleanCheckbox value="#{dateTimeBean.allowInputToggle}" caption="allow-input-toggle='true' (default is 'false')"
                                       onclick="ajax:dateTimeBean.updateSettings()"
                                       update="@form" />
              <b:selectBooleanCheckbox value="#{dateTimeBean.sideBySide}" caption="side-by-side='true' (default is 'false')"
                                       onclick="ajax:dateTimeBean.updateSettings()"
                                       update="@form" />
              <b:selectBooleanCheckbox value="#{dateTimeBean.showDate}" caption="show-date='true'"
                                       onclick="ajax:dateTimeBean.updateSettings()"
                                       update="@form" />
              <b:selectBooleanCheckbox value="#{dateTimeBean.showTime}" caption="show-time='true'"
                                       onclick="ajax:dateTimeBean.updateSettings()"
                                       update="@form" />
              <b:selectBooleanCheckbox value="#{dateTimeBean.useCurrent}" caption="useCurrent='true' (default: true)"
                                       onclick="ajax:dateTimeBean.updateSettings()"
                                       update="@form" />
              <b:selectBooleanCheckbox value="#{dateTimeBean.disableWeekend}" caption="week-days-disabled='6,0'"
                                       onclick="ajax:dateTimeBean.updateSettings()"
                                       update="@form" />
              <b:selectBooleanCheckbox value="#{dateTimeBean.disabledDatesActive}" caption="disabledDates=&quot;'08/03/2019', new Date(2019, 8-1,4), moment('08/05/2019')&quot;"
                                       onclick="ajax:dateTimeBean.updateSettings()"
                                       update="@form" />
                                       
            </b:panelGrid>
          </b:panel>
        </b:panelGrid>
      </h:form>

      <f:facet name="footer">
        <strong>JSF markup:</strong>
        <b:panel>
          <script type="syntaxhighlighter"
          class="brush: xml; toolbar: false;gutter: false; first-line: 1">
          <![CDATA[
          <b:form>
            <b:dateTimePicker value="&num;{dateTimeBean.justNow}"
                              allow-input-toggle="&num;{dateTimeBean.allowInputToggle}"
                              icon-position="&num;{dateTimeBean.iconPosition}"
                              mode="&num;{dateTimeBean.mode}"
                              side-by-side="&num;{dateTimeBean.sideBySide}"
                              show-date="&num;{dateTimeBean.showDate}"
                              show-time="&num;{dateTimeBean.showTime}"
                              show-icon="&num;{dateTimeBean.showIcon}"
                              use-current="&num;{dateTimeBean.useCurrent}" />
          </b:form>
          ]]>
          </script>
        </b:panel>
      </f:facet>
    </b:panel>

    <h2><a id="mode">Mode="inline"</a><b:badge value="breaking change in 1.0.2"/></h2>
    <p>We've removed the option <code>mode="inline"</code> in favor of two more explicit options: <code>show-icon</code> and <code>icon-position</code>.</p>

    <h2><a id="disable_and_readonly">Disable and readonly</a></h2>
    <p>The dateTimePicker has also the ability to disable and set the readonly option.</p>
    <p><b:badge value="Attention" style="background-color:red;"/> Unfortunately, at the moment, the readonly attribute doesn't work on the dateTimePicker in mode="inline"</p>

    <b:panel title="Live preview" look="info" collapsible="false">
      <b:form>
        <b:dateTimePicker value="#{dateTimeBean.justNow}" disabled="true" label="Disabled DateTimePicker:"  />
        <b:dateTimePicker value="#{dateTimeBean.justNow}" readonly="true" label="Readonly DateTimePicker:" />
        <hr/>
        <b:dateTimePicker value="#{dateTimeBean.justNow}" disabled="true" mode="inline" label="Disabled inline DateTimePicker: "  />
      </b:form>

      <f:facet name="footer">
        <strong>JSF markup:</strong>
        <b:panel>
          <script type="syntaxhighlighter"
          class="brush: xml; toolbar: false;gutter: false; first-line: 1">
          <![CDATA[
          <b:form>
            <b:dateTimePicker value="&num;{dateTimeBean.justNow}" disabled="true" label="Disabled DateTimePicker:" />
            <b:dateTimePicker value="&num;{dateTimeBean.justNow}" readonly="true" label="Readonly DateTimePicker:" />
            <hr/>
            <b:dateTimePicker value="&num;{dateTimeBean.justNow}" disabled="true" mode="inline" label="Disabled inline DateTimePicker:" />
          </b:form>
          ]]>
          </script>
        </b:panel>
      </f:facet>
    </b:panel>

    <h2><a id="formatting_and_locale">Formatting and locale</a></h2>
    <p>By default, the dateTimePicker tries to guess the proper format from your locale. You can customize this by three
    options:</p>
    <ul>
      <li><code>show-date</code> allows you to show or hide the calendar.</li>
      <li><code>show-time</code> allows you to show or hide the time picker.</li>
      <li><code>format</code> This option overrules both <code>show-date</code> and <code>show-time</code>. You can
        define an arbitrary date and time format by using the format definitions of
        <a target="#" href="http://momentjs.com/docs/#/displaying/format/">moment.js</a>.
        Note that moment.js is a JavaScript library that does not follow the formatting rules Java programmers are used to.
      There are subtle (and sometimes not-so-subtle) differences.</li>
    </ul>

    <b:panel title="Live preview" look="info" collapsible="false">
      <b:form>
        <b:dateTimePicker locale="de" value="#{dateTimeBean.justNow}" format="DD.MM.YYYY" label="German date format"  />
        <b:dateTimePicker locale="en" value="#{dateTimeBean.justNow}" format="MM/DD/YYYY" label="American date format"  />
        <b:dateTimePicker locale="it" placeholder="Data di inizio" format="DD/MM/YYYY" label="Italian date format" />
      </b:form>

      <f:facet name="footer">
        <strong>JSF markup:</strong>
        <b:panel>
          <script type="syntaxhighlighter"
          class="brush: xml; toolbar: false;gutter: false; first-line: 1">
          <![CDATA[
          <b:form>
            <b:dateTimePicker format="DD.MM.YYYY" locale="de" value="&num;{dateTimeBean.justNow}" label="German date format"  />
            <b:dateTimePicker format="MM/DD/YYYY" locale="en" value="&num;{dateTimeBean.justNow}" label="American date format"  />
            <b:dateTimePicker format="DD/MM/YYYY" locale="it" placeholder="Data di inizio" label="Italian date format" />
          </b:form>
          ]]>
          </script>
        </b:panel>
      </f:facet>
    </b:panel>

    <a id="interactiveCheatSheet"></a>

    <ui:include src="DateTimePickerCheatSheet.xhtml" />

    <h2><a id="datetimepicker_widget_inside_an_overflow_area">DateTimePicker widget inside an overflow area</a></h2>
    <p>By default, the popup widget of DateTimePicker goes inside the parent of the input component. This means that, if the component itself is too small to display
    the entire popup and has an hidden overflow, the popup will go under the component area. To prevent this behaviour, you can use the "widgetParent" attribute, that attach
    the popup widget to the widgetParent item, but display it near to the input of component.
    </p>
    <b:panel title="Live preview" look="info" collapsible="false">
      <b:form>
      <div id="picker-anchor" style="position: relative;">Anchor here</div>
        <div style="overflow: hidden;">
          <div class="form-group">
            <b:dateTimePicker
               value="#{dateTimeBean.justNow}"
               label="With WidgetParent"

               iconAwesome="clock-o"
               widgetParent="#picker-anchor" />
          </div>
        </div>

        <div style="overflow: hidden;">
          <div class="form-group">
            <b:dateTimePicker
               value="#{dateTimeBean.justNow}"
               label="Without WidgetParent"

               iconAwesome="clock-o" />
          </div>
        </div>
      </b:form>

      <f:facet name="footer">
        <strong>JSF markup:</strong>
        <b:panel>
          <script type="syntaxhighlighter"
          class="brush: xml; toolbar: false;gutter: false; first-line: 1">
          <![CDATA[
          <b:form>
          <div id="picker-anchor" style="position: relative;">Anchor here</div>

            <div style="overflow: hidden;">
              <div class="form-group">
                <b:dateTimePicker value="&num;{dateTimeBean.justNow}" widgetParent="#picker-anchor" label="With WidgetParent" iconAwesome="clock-o" />
              </div>
            </div>

            <div style="overflow: hidden;">
              <div class="form-group">
                <b:dateTimePicker value="&num;{dateTimeBean.justNow}" label="Without WidgetParent" iconAwesome="clock-o" />
              </div>
            </div>
          </b:form>]]>
          </script>
        </b:panel>
      </f:facet>
    </b:panel>

    <h2><a id="labels">Labels, required fields and error messages</a><b:badge value="breaking change in 1.1.0" /></h2>
    <p>You can add a label by adding the attribute <code>label</code>. The label is also used by the JSF messages. To give you maximum flexibility,
    you can suppress automatic rendering of labels by adding <code>renderLabel="false"</code>.
    </p>
    <h4>BootsFaces 1.0.2 and below:</h4>
    <p>Required inputs fields and their labels both bear the CSS class <code>bf-required</code>. By default, this adds an asterisk to the label.</p>
    <p>If the field has a FacesMessage, one of the CSS classes <code>bf-info</code>, <code>bf-warning</code>,
    <code>bf-error</code> or <code>bf-fatal</code>, depending on which error severity the message has.
    The latter two classes color the label red.</p>
    <p>If there's no message,
    the field and its label bear the pseudo CSS class <code>bf-no-message</code>  and <code>has-success</code>. The latter colors the label green by default.
    </p>
    <h4>BootsFaces 1.1.0:</h4>
    <p><code>bf-info</code>, <code>bf-warning</code>,
    <code>bf-error</code> or <code>bf-fatal</code> have been dropped in favor of the standard Bootstrap CSS classes <code>has-success</code>,
    <code>has-warning</code> and <code>has-error</code>. Plus, they are applied to the <code>form-group</code> instead of the labels and input fields.</p>
    <h5>Compatibility settings</h5>
    <p>If your application depends on the old HTML code, activate the context parameter <code>net.bootsfaces.legacy_error_classes</code>
    in the web.xml. The example below shows how to do this.</p>

    <b:panel title="Live preview" look="info" collapsible="false">
      <b:form horizontal="true">
        <b:panelGrid columns="2" size="sm">
          <ui:fragment>
            <b:formGroup>
              <b:dateTimePicker mode="toggle-icon" showWeek="true" value="#{dateBean.cdate}" required="true"
                                label="Date:"  label-col-sm="3" col-sm="6" />
              <b:message for="@previous" col-sm="9" />
            </b:formGroup>
            <b:commandButton value="submit" update="@form" look="success" />
          </ui:fragment>
          <b:switch value="#{messageStyleBean.useLegacyBootsFacesStyle}"
                    immediate="true"
                    process="@this"
                    caption="use legacy BootsFaces CSS classes"
                    label="compatibility settings"
                    onchange="ajax:messageStyleBean.toggleSettings();"
                    update="@form" />
        </b:panelGrid>
      </b:form>
      <f:facet name="footer">
        <strong>JSF markup:</strong>
        <b:panel>
          <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
          <![CDATA[
          <b:form horizontal="true">
            <b:formGroup>
              <b:dateTimePicker mode="toggle-icon" showWeek="true" value="&num;{dateBean.cdate}" required="true" label="Date:" label-col-sm="3" col-sm="6" />
              <b:message for="@previous" col-sm="9" />
            </b:formGroup>
            <b:commandButton value="submit" update="@form" look="success" />
          </b:form>
          ]]></script>
        </b:panel>
      </f:facet>
    </b:panel>

    <h2><a id="datetimepicker_ajax">DateTimePicker AJAX</a><b:badge value="since 1.0" /> </h2>
    <p>DateTimePicker component also support AJAX events. In addition to the basic JavaScript events (click, blur, key*, mouse*), it supports also a custom event (dtchange) that is
    called every time the datetime value changes. But you must pay attention! This event will be fired also during navigation of the popup widget, because it changes the date on the fly.
    If you want to get the latest selected value, you can use standard events like "onblur".<br/>
    Note that the component must be inside a form to work in AJAX!
    </p>

    <b:panel title="Live preview" look="info" collapsible="false">
      <b:form>
        <b:dateTimePicker value="#{test.dataToPick}" ondtchange="ajax:test.updateTestField()" process="@this" update="@next" label="Select date:" iconAwesome="bolt"  />
        <b:inputText value="#{test.testField}" label="Result: " readonly="true"  />
      </b:form>
      <f:facet name="footer">
        <strong>JSF markup:</strong>
        <b:panel>
          <script type="syntaxhighlighter"
          class="brush: xml; toolbar: false;gutter: false; first-line: 1">
          <![CDATA[
          <b:form>
            <b:dateTimePicker value="&num;{test.dataToPick}" ondtchange="ajax:test.updateTestField()" process="@this" update="@next" label="Select date:" iconAwesome="bolt" />
            <b:inputText value="&num;{test.testField}" label="Result: " readonly="true" />
          </b:form>
          ]]>
          </script>
        </b:panel>
      </f:facet>
    </b:panel>

    <h2><a id="id_and_field">id and field-id</a><b:badge value="since 1.0.1" /> </h2>
    <p>The datepicker widgets consists of the input field and some extra HTML code which makes it look like a datepicker. Both items
    have an id. The id of the outer HTML code is the standard <code>id</code> every JSF component has. The id of the input field
    can be modified by the attribute <code>field-id</code>. By default, it's the client id plus the suffix <code>_Input</code>,
    but that's subject to change, so please don't rely on it.
    </p>

    <b:panel title="Live preview" look="info" collapsible="false">
      <b:form>
        <b:dateTimePicker id="aGreatId" fieldId="evenGreaterFieldId" value="#{test.dataToPick}" iconAwesome="bolt" label="Select:"  />
      </b:form>

      <f:facet name="footer">
        <b:tabView contentStyle="border-right: 1px solid #ddd;border-left: 1px solid #ddd;border-bottom: 1px solid #ddd;padding:10px">
          <b:tab title="JSF markup">
            <b:panel>
              <script type="syntaxhighlighter"
              class="brush: xml; toolbar: false;gutter: false; first-line: 1">
              <![CDATA[
              <b:form>
                <b:dateTimePicker id="aGreatId" fieldId="evenGreaterFieldId" value="&num;{test.dataToPick}" iconAwesome="bolt" label="Select:"  />
              </b:form>
              ]]>
              </script>
            </b:panel>
          </b:tab>
          <b:tab title="Generated HTML code">
            <b:panel>
              <script type="syntaxhighlighter"
              class="brush: html; toolbar: false;gutter: false; first-line: 1">
              <![CDATA[
              <form id="j_idt295" name="j_idt295" method="post" action="/forms/DateTimePicker.jsf">
              <input name="j_idt295" value="j_idt295" type="hidden">
              <div id="j_idt295:aGreatId" class="form-group">
                <label for="evenGreaterFieldId" class=" control-label">Select:</label>
                <div class="input-group date" id="j_idt295:aGreatIdOuter">
                  <input id="evenGreaterFieldId" name="j_idt295:aGreatId" class="form-control" value="24/06/17 16:48:38" type="text">
                  <!-- More code, ommited for brevity-->
                </div>
              </div>
              <!-- More code, ommited for brevity-->
              </form>
              ]]>
              </script>
            </b:panel>
          </b:tab>
        </b:tabView>
      </f:facet>
    </b:panel>

    <h2><a id="reference_section">Reference section</a></h2>
    <ui:include src="DateTimePickerAttributes.xhtml" />
    <b:panel look="info" rendered="false">
      <f:facet name="heading">
        <b>Skinning</b>
      </f:facet>
      <ul>
        <li>Tell the world which CSS classes can be used to change the look of the component.</li>
      </ul>
    </b:panel>

    <script type="text/javascript">
    SyntaxHighlighter.all();
    </script>
  </ui:define>
</ui:composition>
