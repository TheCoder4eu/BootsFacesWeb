<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<ui:fragment
  xmlns="http://www.w3.org/1999/xhtml"
  xmlns:h="jakarta.faces.html"
  xmlns:f="jakarta.faces.core"
  xmlns:b="http://bootsfaces.net/ui"
  xmlns:ui="jakarta.faces.facelets">

    <b:panel look="info">
      <f:facet name="heading">
        <b>Attributes of &lt;b:form &gt;</b>
      </f:facet>
      <div class="table-responsive">
        <table class="table table-striped table-hover"
          style="background-color: #fff">
          <thead>
            <tr>
              <th>Attribute</th>
              <th>Default value</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
                <td>accept</td>
                <td>(none)</td>
                <td>List of content types that a server processing this form will handle correctly</td>
            </tr>
            <tr>
                <td>acceptcharset</td>
                <td>(none)</td>
                <td>List of character encodings for input data that are accepted by the server processing this form.</td>
            </tr>
            <tr>
                <td>auto-update<br />autoUpdate (alternative writing)</td>
                <td>false</td>
                <td>Setting this flag updates the widget on every AJAX request.</td>
            </tr>
            <tr>
                <td>binding</td>
                <td>(none)</td>
                <td>The ValueExpression linking this component to a property in a backing bean</td>
            </tr>
            <tr>
                <td>dir</td>
                <td>(none)</td>
                <td>Direction indication for text that does not inherit directionality. Legal values: ltr (Default. Left-to-right text direction), rtl (Right-to-left text direction) and auto (let the browser figure out the direction of your alphabet, based on the page content).</td>
            </tr>
            <tr>
                <td>enctype</td>
                <td>(none)</td>
                <td>Content type used to submit the form to the server.  If not specified, the default value is 'application/x-www-form-urlencoded'.</td>
            </tr>
            <tr>
                <td>horizontal</td>
                <td> false </td>
                <td>Use this flag to create a horizontal form (labels are on the same line as their input fields)</td>
            </tr>
            <tr>
                <td>id</td>
                <td>(none)</td>
                <td>Unique identifier of the component in a namingContainer.</td>
            </tr>
            <tr>
                <td>inline</td>
                <td> false </td>
                <td>Use this flag to create a inline form (labels are on the same line as their input fields)</td>
            </tr>
            <tr>
                <td>lang</td>
                <td>(none)</td>
                <td>Code describing the language used in the generated markup for this component.</td>
            </tr>
            <tr>
                <td>onclick</td>
                <td>(none)</td>
                <td>The onclick attribute.</td>
            </tr>
            <tr>
                <td>ondblclick</td>
                <td>(none)</td>
                <td>Client side callback to execute when input element is double clicked.</td>
            </tr>
            <tr>
                <td>onkeydown</td>
                <td>(none)</td>
                <td>Client side callback to execute when a key is pressed down over input element.</td>
            </tr>
            <tr>
                <td>onkeypress</td>
                <td>(none)</td>
                <td>Client side callback to execute when a key is pressed and released over input element.</td>
            </tr>
            <tr>
                <td>onkeyup</td>
                <td>(none)</td>
                <td>Client side callback to execute when a key is released over input element.</td>
            </tr>
            <tr>
                <td>onmousedown</td>
                <td>(none)</td>
                <td>Client side callback to execute when a pointer input element is pressed down over input element.</td>
            </tr>
            <tr>
                <td>onmousemove</td>
                <td>(none)</td>
                <td>Client side callback to execute when a pointer input element is moved within input element.</td>
            </tr>
            <tr>
                <td>onmouseout</td>
                <td>(none)</td>
                <td>Client side callback to execute when a pointer input element is moved away from input element.</td>
            </tr>
            <tr>
                <td>onmouseover</td>
                <td>(none)</td>
                <td>Client side callback to execute when a pointer input element is moved onto input element.</td>
            </tr>
            <tr>
                <td>onmouseup</td>
                <td>(none)</td>
                <td>Client side callback to execute when a pointer input element is released over input element.</td>
            </tr>
            <tr>
                <td>onreset</td>
                <td>(none)</td>
                <td>Javascript code executed when this form is reset.</td>
            </tr>
            <tr>
                <td>onsubmit</td>
                <td>(none)</td>
                <td>Javascript code executed when this form is submitted.</td>
            </tr>
            <tr>
                <td>prependId</td>
                <td>false</td>
                <td>Flag indicating whether or not this form should prepend its id to its descendent's id during the clientId generation process. If this flag is not set, the default value is true.</td>
            </tr>
            <tr>
                <td>rendered</td>
                <td>false</td>
                <td>Boolean value to specify the rendering of the component, when set to false the component will not be rendered.</td>
            </tr>
            <tr>
                <td>role</td>
                <td>(none)</td>
                <td>Role attribute used by screen readers.</td>
            </tr>
            <tr>
                <td>style</td>
                <td>(none)</td>
                <td>Inline style of the input element.</td>
            </tr>
            <tr>
                <td>style-class<br />styleClass (alternative writing)</td>
                <td>(none)</td>
                <td>Style class of this element.</td>
            </tr>
            <tr>
                <td>target</td>
                <td>(none)</td>
                <td>Name of a frame where the response retrieved after this form submit is to be displayed.</td>
            </tr>
            <tr>
                <td>title</td>
                <td>(none)</td>
                <td>Advisory title information about markup elements generated for this component.</td>
            </tr>
          </tbody>
        </table>
      </div>
    </b:panel>
</ui:fragment>
